{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shadan Syed Kazmi\\\\Projects\\\\msteams-clone\\\\frontend\\\\src\\\\Components\\\\TeamFiles.jsx\",\n  _s = $RefreshSig$();\n// // components/TeamFiles.js\n// import React, { useState, useEffect } from 'react';\n// import { List, Icon, Segment } from 'semantic-ui-react';\n// import axios from 'axios';\n\n// const TeamFiles = ({ teamId }) => {\n//   const [teamFiles, setTeamFiles] = useState([]);\n\n//   useEffect(() => {\n//     const fetchFiles = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:8000/files/${teamId}`);\n//         setTeamFiles(response.data);\n//       } catch (error) {\n//         console.error('Error fetching team files:', error);\n//       }\n//     };\n\n//     fetchFiles();\n//   }, [teamId]);\n\n//   return (\n//     <Segment>\n//       <Icon name='folder open' />\n//       Files\n//       <List divided relaxed>\n//         {teamFiles.map(file => (\n//           <List.Item key={file._id}>\n//             <List.Icon name='file' />\n//             <List.Content>\n//               <List.Header as='a' href={file.fileUrl} target='_blank'>{file.fileName}</List.Header>\n//               <List.Description>{file.description}</List.Description>\n//             </List.Content>\n//           </List.Item>\n//         ))}\n//       </List>\n//     </Segment>\n//   );\n// };\n\n// export default TeamFiles;\n\nimport React, { useState, useEffect } from 'react';\nimport { List, Icon, Segment } from 'semantic-ui-react';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TeamFiles = () => {\n  _s();\n  const [teamFiles, setTeamFiles] = useState([]);\n  const location = useLocation();\n  const teamId = location.state.teamId;\n  useEffect(() => {\n    const fetchFiles = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8000/files/${teamId}`);\n        setTeamFiles(response.data.uploadedContents); // Assuming response structure matches provided example\n      } catch (error) {\n        console.error('Error fetching team files:', error);\n      }\n    };\n    fetchFiles();\n  }, [teamId]);\n  const formatDateTime = dateTimeString => {\n    const dateTime = new Date(dateTimeString);\n    return `${dateTime.toLocaleDateString()} ${dateTime.toLocaleTimeString()}`;\n  };\n  return /*#__PURE__*/_jsxDEV(Segment, {\n    children: [/*#__PURE__*/_jsxDEV(Icon, {\n      name: \"folder open\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), \"Files\", /*#__PURE__*/_jsxDEV(List, {\n      divided: true,\n      relaxed: true,\n      children: teamFiles.map(file => /*#__PURE__*/_jsxDEV(List.Item, {\n        children: [/*#__PURE__*/_jsxDEV(List.Icon, {\n          name: \"file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(List.Content, {\n          children: [/*#__PURE__*/_jsxDEV(List.Header, {\n            as: \"a\",\n            href: file.msgContent,\n            target: \"_blank\",\n            children: file.msgContent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(List.Description, {\n            children: formatDateTime(file.createdAt)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)]\n      }, file._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(TeamFiles, \"9LLwFDAD//JL9rtIGvpUiikJ/cs=\", false, function () {\n  return [useLocation];\n});\n_c = TeamFiles;\nexport default TeamFiles;\nvar _c;\n$RefreshReg$(_c, \"TeamFiles\");","map":{"version":3,"names":["React","useState","useEffect","List","Icon","Segment","axios","useLocation","jsxDEV","_jsxDEV","TeamFiles","_s","teamFiles","setTeamFiles","location","teamId","state","fetchFiles","response","get","data","uploadedContents","error","console","formatDateTime","dateTimeString","dateTime","Date","toLocaleDateString","toLocaleTimeString","children","name","fileName","_jsxFileName","lineNumber","columnNumber","divided","relaxed","map","file","Item","Content","Header","as","href","msgContent","target","Description","createdAt","_id","_c","$RefreshReg$"],"sources":["C:/Users/Shadan Syed Kazmi/Projects/msteams-clone/frontend/src/Components/TeamFiles.jsx"],"sourcesContent":["// // components/TeamFiles.js\r\n// import React, { useState, useEffect } from 'react';\r\n// import { List, Icon, Segment } from 'semantic-ui-react';\r\n// import axios from 'axios';\r\n\r\n// const TeamFiles = ({ teamId }) => {\r\n//   const [teamFiles, setTeamFiles] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchFiles = async () => {\r\n//       try {\r\n//         const response = await axios.get(`http://localhost:8000/files/${teamId}`);\r\n//         setTeamFiles(response.data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching team files:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchFiles();\r\n//   }, [teamId]);\r\n\r\n//   return (\r\n//     <Segment>\r\n//       <Icon name='folder open' />\r\n//       Files\r\n//       <List divided relaxed>\r\n//         {teamFiles.map(file => (\r\n//           <List.Item key={file._id}>\r\n//             <List.Icon name='file' />\r\n//             <List.Content>\r\n//               <List.Header as='a' href={file.fileUrl} target='_blank'>{file.fileName}</List.Header>\r\n//               <List.Description>{file.description}</List.Description>\r\n//             </List.Content>\r\n//           </List.Item>\r\n//         ))}\r\n//       </List>\r\n//     </Segment>\r\n//   );\r\n// };\r\n\r\n// export default TeamFiles;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { List, Icon, Segment } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst TeamFiles = () => {\r\n  const [teamFiles, setTeamFiles] = useState([]);\r\n  const location = useLocation();\r\n  const teamId = location.state.teamId;\r\n\r\n  useEffect(() => {\r\n    const fetchFiles = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:8000/files/${teamId}`);\r\n        setTeamFiles(response.data.uploadedContents); // Assuming response structure matches provided example\r\n      } catch (error) {\r\n        console.error('Error fetching team files:', error);\r\n      }\r\n    };\r\n\r\n    fetchFiles();\r\n  }, [teamId]);\r\n\r\n  const formatDateTime = (dateTimeString) => {\r\n    const dateTime = new Date(dateTimeString);\r\n    return `${dateTime.toLocaleDateString()} ${dateTime.toLocaleTimeString()}`;\r\n  };\r\n\r\n  return (\r\n    <Segment>\r\n      <Icon name='folder open' />\r\n      Files\r\n      <List divided relaxed>\r\n        {teamFiles.map(file => (\r\n          <List.Item key={file._id}>\r\n            <List.Icon name='file' />\r\n            <List.Content>\r\n              <List.Header as='a' href={file.msgContent} target='_blank'>{file.msgContent}</List.Header>\r\n              {/* Assuming msgContent contains the file URL */}\r\n              <List.Description>{formatDateTime(file.createdAt)}</List.Description>\r\n            </List.Content>\r\n          </List.Item>\r\n        ))}\r\n      </List>\r\n    </Segment>\r\n    \r\n  );\r\n};\r\n\r\nexport default TeamFiles;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
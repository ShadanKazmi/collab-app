{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shadan Syed Kazmi\\\\Projects\\\\msteams-clone\\\\frontend\\\\src\\\\Components\\\\TeamFiles.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { List, Icon, Segment } from 'semantic-ui-react';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport useDownloader from 'react-use-downloader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TeamFiles = () => {\n  _s();\n  const [teamFiles, setTeamFiles] = useState([]);\n  const location = useLocation();\n  const teamId = location.state.teamId;\n  const {\n    download\n  } = useDownloader();\n  useEffect(() => {\n    const fetchFiles = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8000/files/${teamId}`);\n        setTeamFiles(response.data.uploadedContents); // Assuming response structure matches provided example\n      } catch (error) {\n        console.error('Error fetching team files:', error);\n      }\n    };\n    fetchFiles();\n  }, [teamId]);\n  const handleFileDownload = fileUrl => {\n    const filename = fileUrl.split('/').pop();\n    download(fileUrl, filename);\n  };\n  const formatDateTime = dateTimeString => {\n    const dateTime = new Date(dateTimeString);\n    return `${dateTime.toLocaleDateString()} ${dateTime.toLocaleTimeString()}`;\n  };\n  return /*#__PURE__*/_jsxDEV(Segment, {\n    children: [/*#__PURE__*/_jsxDEV(Icon, {\n      name: \"folder open\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), \"Files\", /*#__PURE__*/_jsxDEV(List, {\n      divided: true,\n      relaxed: true,\n      children: teamFiles.map(file =>\n      // Only render if msgContent exists and taskContent does not exist\n      file.msgContent && !file.taskContent && /*#__PURE__*/_jsxDEV(List.Item, {\n        children: [/*#__PURE__*/_jsxDEV(List.Icon, {\n          name: \"file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(List.Content, {\n          children: /*#__PURE__*/_jsxDEV(List.Header, {\n            as: \"a\",\n            onClick: () => {\n              handleFileDownload(`http://localhost:8000/files${file.msgContent}`);\n            },\n            target: \"_blank\",\n            children: file.msgContent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this)]\n      }, file._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(TeamFiles, \"30DSfe4dt+nnbNAryEDsC8pbT0w=\", false, function () {\n  return [useLocation, useDownloader];\n});\n_c = TeamFiles;\nexport default TeamFiles;\nvar _c;\n$RefreshReg$(_c, \"TeamFiles\");","map":{"version":3,"names":["React","useState","useEffect","List","Icon","Segment","axios","useLocation","useDownloader","jsxDEV","_jsxDEV","TeamFiles","_s","teamFiles","setTeamFiles","location","teamId","state","download","fetchFiles","response","get","data","uploadedContents","error","console","handleFileDownload","fileUrl","filename","split","pop","formatDateTime","dateTimeString","dateTime","Date","toLocaleDateString","toLocaleTimeString","children","name","fileName","_jsxFileName","lineNumber","columnNumber","divided","relaxed","map","file","msgContent","taskContent","Item","Content","Header","as","onClick","target","_id","_c","$RefreshReg$"],"sources":["C:/Users/Shadan Syed Kazmi/Projects/msteams-clone/frontend/src/Components/TeamFiles.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { List, Icon, Segment } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport { useLocation } from 'react-router-dom';\r\nimport useDownloader from 'react-use-downloader';\r\n\r\nconst TeamFiles = () => {\r\n  const [teamFiles, setTeamFiles] = useState([]);\r\n  const location = useLocation();\r\n  const teamId = location.state.teamId;\r\n  const { download } = useDownloader();\r\n\r\n  useEffect(() => {\r\n    const fetchFiles = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:8000/files/${teamId}`);\r\n        setTeamFiles(response.data.uploadedContents); // Assuming response structure matches provided example\r\n      } catch (error) {\r\n        console.error('Error fetching team files:', error);\r\n      }\r\n    };\r\n\r\n    fetchFiles();\r\n  }, [teamId]);\r\n\r\n  const handleFileDownload = (fileUrl) => {\r\n    const filename = fileUrl.split('/').pop();\r\n    download(fileUrl, filename);\r\n};\r\n\r\n  const formatDateTime = (dateTimeString) => {\r\n    const dateTime = new Date(dateTimeString);\r\n    return `${dateTime.toLocaleDateString()} ${dateTime.toLocaleTimeString()}`;\r\n  };\r\n\r\n  return (\r\n    <Segment>\r\n      <Icon name='folder open' />\r\n      Files\r\n      <List divided relaxed>\r\n        {teamFiles.map(file => (\r\n          // Only render if msgContent exists and taskContent does not exist\r\n          file.msgContent && !file.taskContent && (\r\n            <List.Item key={file._id}>\r\n              <List.Icon name='file' />\r\n              <List.Content>\r\n                <List.Header as='a' onClick = {() => {handleFileDownload(`http://localhost:8000/files${file.msgContent}`)}} target='_blank'>{file.msgContent}</List.Header>\r\n                {/* Assuming msgContent contains the file URL */}\r\n              </List.Content>\r\n            </List.Item>\r\n          )\r\n        ))}\r\n      </List>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default TeamFiles;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
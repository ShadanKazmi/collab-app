{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import {\n//     CommentText,\n//     CommentMetadata,\n//     CommentGroup,\n//     CommentContent,\n//     CommentAvatar,\n//     CommentActions,\n//     CommentAuthor,\n//     Comment,\n//     Form,\n//     FormTextArea,\n//     Button,\n//     Icon,\n//     Divider,\n// } from 'semantic-ui-react';\n// import axios from 'axios';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import Cookies from 'js-cookie';\n// import useDownloader from 'react-use-downloader';\n\n// const TeamFeed = () => {\n//     const { teamId } = useParams();\n//     const navigate = useNavigate();\n//     const [comments, setComments] = useState([]);\n//     const [newComment, setNewComment] = useState('');\n//     const [newFile, setNewFile] = useState(null);\n//     const [filePreview, setFilePreview] = useState(null);\n//     const [replyText, setReplyText] = useState('');\n//     const [replyingIndex, setReplyingIndex] = useState(null);\n//     const { download } = useDownloader();\n\n//     useEffect(() => {\n//         fetchMessages(); // Initial fetch\n\n//         const interval = setInterval(() => {\n//             fetchMessages(); // Fetch messages every 10 seconds (adjust as needed)\n//         }, 10000);\n\n//         return () => {\n//             clearInterval(interval); // Clean up interval on component unmount\n//         };\n//     }, [teamId]);\n\n//     const fetchMessages = async () => {\n//         try {\n//             const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\n//             setComments(response.data);\n//         } catch (error) {\n//             console.error('Error fetching messages:', error);\n//         }\n//     };\n\n//     const getCurrentUser = async () => {\n//         try {\n//             const userId = Cookies.get('userId');\n//             if (!userId) {\n//                 console.error('User ID not found in cookies.');\n//                 return null;\n//             }\n//             const response = await axios.get(`http://localhost:8000/userAuth/${userId}`);\n//             return response.data;\n//         } catch (error) {\n//             console.error('Error fetching user:', error);\n//             return null;\n//         }\n//     };\n\n//     const handleAddComment = async () => {\n//         if (newComment.trim() !== '' || newFile) {\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n//             const userId = Cookies.get('userId');\n\n//             const currentUser = await getCurrentUser();\n//             if (!currentUser) {\n//                 console.error('User not found.');\n//                 return;\n//             }\n\n//             const formData = new FormData();\n//             formData.append('textContent', newComment);\n//             formData.append('teamId', teamId);\n//             formData.append('userId', userId);\n//             if (newFile) {\n//                 formData.append('uploadContent', newFile);\n//             }\n\n//             try {\n//                 const response = await axios.post('http://localhost:8000/feed/', formData, {\n//                     headers: {\n//                         'Content-Type': 'multipart/form-data',\n//                     },\n//                 });\n\n//                 const savedMessage = response.data;\n//                 const commentData = {\n//                     _id: savedMessage._id,\n//                     textContent: newComment,\n//                     uploadContent: savedMessage.uploadContent,\n//                     createdBy: {\n//                         _id: userId,\n//                         firstName: currentUser.firstName,\n//                         lastName: currentUser.lastName,\n//                     },\n//                     createdAt: currentDate,\n//                     replies: [],\n//                 };\n//                 setComments([...comments, commentData]);\n//                 setNewComment('');\n//                 setNewFile(null);\n//                 setFilePreview(null);\n//             } catch (error) {\n//                 console.error('Error adding message:', error);\n//             }\n//         }\n//     };\n\n//     const handleAddReply = async (commentId) => {\n//         if (replyText.trim() !== '') {\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n//             const userId = Cookies.get('userId');\n//             const currentUser = await getCurrentUser();\n//             const replyData = {\n//                 textContent: replyText,\n//                 createdBy: {\n//                     _id: userId,\n//                     firstName: currentUser.firstName,\n//                     lastName: currentUser.lastName,\n//                 },\n//                 createdAt: currentDate,\n//             };\n\n//             try {\n//                 const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\n//                     textContent: replyText,\n//                     userId: userId,\n//                 });\n\n//                 const updatedComments = comments.map(comment =>\n//                     comment._id === commentId\n//                         ? {\n//                             ...comment,\n//                             replies: [...comment.replies, { ...replyData, _id: response.data._id }],\n//                         }\n//                         : comment\n//                 );\n\n//                 setComments(updatedComments);\n//                 setReplyText('');\n//                 setReplyingIndex(null);\n//             } catch (error) {\n//                 console.error('Error adding reply:', error);\n//             }\n//         }\n//     };\n\n//     const startReply = (index) => {\n//         setReplyingIndex(index);\n//     };\n\n//     const handleUserClick = (user) => {\n//         navigate('/profile', { state: { user } });\n//     };\n\n//     const handleFileChange = (e) => {\n//         const file = e.target.files[0];\n//         setNewFile(file);\n//         if (file) {\n//             const reader = new FileReader();\n//             reader.onloadend = () => {\n//                 setFilePreview(reader.result);\n//             };\n//             reader.readAsDataURL(file);\n//         } else {\n//             setFilePreview(null);\n//         }\n//     };\n\n//     const handleFileDownload = (fileUrl) => {\n//         const filename = fileUrl.split('/').pop();\n//         download(fileUrl, filename);\n//     };\n\n//     return (\n//         <div style={{ paddingLeft: '100px', marginTop: '7rem', position: 'relative', overflow: 'hidden' }}>\n//             <Divider horizontal >Feed</Divider>\n//             <div style={{ paddingBottom: '4rem', marginBottom: '4rem' }}>\n//                 <CommentGroup threaded size='large'>\n//                     {comments.map((comment, index) => (\n//                         <Comment key={comment._id}>\n//                             <CommentAvatar as='a' src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'} />\n//                             <CommentContent>\n//                                 <CommentAuthor as='a' onClick={() => handleUserClick(comment.createdBy)}>\n//                                     {comment.createdBy.firstName} {comment.createdBy.lastName}\n//                                 </CommentAuthor>\n//                                 <CommentMetadata>\n//                                     <span>{comment.createdAt}</span>\n//                                 </CommentMetadata>\n//                                 <CommentText>{comment.textContent}</CommentText>\n//                                 {comment.uploadContent && (\n//                                     <CommentText>\n//                                         <Button\n//                                             icon\n//                                             labelPosition='left'\n//                                             onClick={() =>\n//                                                 handleFileDownload(`http://localhost:8000/feed${comment.uploadContent}`)\n//                                             }\n//                                         >\n//                                             <Icon name='file alternate' />\n//                                             {`http://localhost:8000/feed${comment.uploadContent}`.split('/').pop()}\n//                                         </Button>\n//                                     </CommentText>\n//                                 )}\n//                                 <CommentActions>\n//                                     <a onClick={() => startReply(index)}>Reply</a>\n//                                 </CommentActions>\n//                                 {comment.replies && comment.replies.length > 0 && (\n//                                     <CommentGroup style={{ marginTop: '0.1px' }}>\n//                                         {comment.replies.map((reply) => (\n//                                             <Comment key={reply._id}>\n//                                                 <CommentAvatar\n//                                                     as='a'\n//                                                     src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'}\n//                                                 />\n//                                                 <CommentContent>\n//                                                     <CommentAuthor as='a' onClick={() => handleUserClick(reply.createdBy)}>\n//                                                         {reply.createdBy.firstName} {reply.createdBy.lastName}\n//                                                     </CommentAuthor>\n//                                                     <CommentMetadata>\n//                                                         <span>{reply.createdAt}</span>\n//                                                     </CommentMetadata>\n//                                                     <CommentText>{reply.textContent}</CommentText>\n//                                                 </CommentContent>\n//                                             </Comment>\n//                                         ))}\n//                                     </CommentGroup>\n//                                 )}\n//                                 {replyingIndex === index && (\n//                                     <Form reply>\n//                                         <FormTextArea\n//                                             value={replyText}\n//                                             onChange={(e) => setReplyText(e.target.value)}\n//                                             placeholder='Write a reply...'\n//                                         />\n//                                         <Button\n//                                             content='Add Reply'\n//                                             labelPosition='left'\n//                                             icon='edit'\n//                                             primary\n//                                             onClick={() => handleAddReply(comment._id)}\n//                                         />\n//                                     </Form>\n//                                 )}\n//                             </CommentContent>\n//                         </Comment>\n//                     ))}\n//                 </CommentGroup>\n//             </div>\n//             <div style={{ position: 'relative', bottom: '0', width: '50%', background: 'white', padding: '1rem' }}>\n//                 <Form reply>\n//                     <FormTextArea\n//                         value={newComment}\n//                         onChange={(e) => setNewComment(e.target.value)}\n//                         placeholder='Send a message'\n//                     />\n//                     {filePreview && (\n//                         <div>\n//                             <img src={filePreview} alt=\"Preview\" style={{ maxHeight: '200px', marginBottom: '10px' }} />\n//                         </div>\n//                     )}\n//                     <Button content='Send' labelPosition='left' icon='send' onClick={handleAddComment} />\n//                     <Button as=\"label\" icon labelPosition='left'>\n//                         <Icon name='upload' />\n//                         Upload File\n//                         <input type=\"file\" hidden onChange={handleFileChange} />\n//                     </Button>\n//                 </Form>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default TeamFeed;","map":{"version":3,"names":[],"sources":["C:/Users/Shadan Syed Kazmi/Projects/msteams-clone/frontend/src/Components/TeamFeed.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import {\r\n//     CommentText,\r\n//     CommentMetadata,\r\n//     CommentGroup,\r\n//     CommentContent,\r\n//     CommentAvatar,\r\n//     CommentActions,\r\n//     CommentAuthor,\r\n//     Comment,\r\n//     Form,\r\n//     FormTextArea,\r\n//     Button,\r\n//     Icon,\r\n//     Divider,\r\n// } from 'semantic-ui-react';\r\n// import axios from 'axios';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// import Cookies from 'js-cookie';\r\n// import useDownloader from 'react-use-downloader';\r\n\r\n// const TeamFeed = () => {\r\n//     const { teamId } = useParams();\r\n//     const navigate = useNavigate();\r\n//     const [comments, setComments] = useState([]);\r\n//     const [newComment, setNewComment] = useState('');\r\n//     const [newFile, setNewFile] = useState(null);\r\n//     const [filePreview, setFilePreview] = useState(null);\r\n//     const [replyText, setReplyText] = useState('');\r\n//     const [replyingIndex, setReplyingIndex] = useState(null);\r\n//     const { download } = useDownloader();\r\n\r\n//     useEffect(() => {\r\n//         fetchMessages(); // Initial fetch\r\n\r\n//         const interval = setInterval(() => {\r\n//             fetchMessages(); // Fetch messages every 10 seconds (adjust as needed)\r\n//         }, 10000);\r\n\r\n//         return () => {\r\n//             clearInterval(interval); // Clean up interval on component unmount\r\n//         };\r\n//     }, [teamId]);\r\n\r\n//     const fetchMessages = async () => {\r\n//         try {\r\n//             const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\r\n//             setComments(response.data);\r\n//         } catch (error) {\r\n//             console.error('Error fetching messages:', error);\r\n//         }\r\n//     };\r\n\r\n//     const getCurrentUser = async () => {\r\n//         try {\r\n//             const userId = Cookies.get('userId');\r\n//             if (!userId) {\r\n//                 console.error('User ID not found in cookies.');\r\n//                 return null;\r\n//             }\r\n//             const response = await axios.get(`http://localhost:8000/userAuth/${userId}`);\r\n//             return response.data;\r\n//         } catch (error) {\r\n//             console.error('Error fetching user:', error);\r\n//             return null;\r\n//         }\r\n//     };\r\n\r\n//     const handleAddComment = async () => {\r\n//         if (newComment.trim() !== '' || newFile) {\r\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n//             const userId = Cookies.get('userId');\r\n\r\n//             const currentUser = await getCurrentUser();\r\n//             if (!currentUser) {\r\n//                 console.error('User not found.');\r\n//                 return;\r\n//             }\r\n\r\n//             const formData = new FormData();\r\n//             formData.append('textContent', newComment);\r\n//             formData.append('teamId', teamId);\r\n//             formData.append('userId', userId);\r\n//             if (newFile) {\r\n//                 formData.append('uploadContent', newFile);\r\n//             }\r\n\r\n//             try {\r\n//                 const response = await axios.post('http://localhost:8000/feed/', formData, {\r\n//                     headers: {\r\n//                         'Content-Type': 'multipart/form-data',\r\n//                     },\r\n//                 });\r\n\r\n//                 const savedMessage = response.data;\r\n//                 const commentData = {\r\n//                     _id: savedMessage._id,\r\n//                     textContent: newComment,\r\n//                     uploadContent: savedMessage.uploadContent,\r\n//                     createdBy: {\r\n//                         _id: userId,\r\n//                         firstName: currentUser.firstName,\r\n//                         lastName: currentUser.lastName,\r\n//                     },\r\n//                     createdAt: currentDate,\r\n//                     replies: [],\r\n//                 };\r\n//                 setComments([...comments, commentData]);\r\n//                 setNewComment('');\r\n//                 setNewFile(null);\r\n//                 setFilePreview(null);\r\n//             } catch (error) {\r\n//                 console.error('Error adding message:', error);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const handleAddReply = async (commentId) => {\r\n//         if (replyText.trim() !== '') {\r\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n//             const userId = Cookies.get('userId');\r\n//             const currentUser = await getCurrentUser();\r\n//             const replyData = {\r\n//                 textContent: replyText,\r\n//                 createdBy: {\r\n//                     _id: userId,\r\n//                     firstName: currentUser.firstName,\r\n//                     lastName: currentUser.lastName,\r\n//                 },\r\n//                 createdAt: currentDate,\r\n//             };\r\n\r\n//             try {\r\n//                 const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\r\n//                     textContent: replyText,\r\n//                     userId: userId,\r\n//                 });\r\n\r\n//                 const updatedComments = comments.map(comment =>\r\n//                     comment._id === commentId\r\n//                         ? {\r\n//                             ...comment,\r\n//                             replies: [...comment.replies, { ...replyData, _id: response.data._id }],\r\n//                         }\r\n//                         : comment\r\n//                 );\r\n\r\n//                 setComments(updatedComments);\r\n//                 setReplyText('');\r\n//                 setReplyingIndex(null);\r\n//             } catch (error) {\r\n//                 console.error('Error adding reply:', error);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const startReply = (index) => {\r\n//         setReplyingIndex(index);\r\n//     };\r\n\r\n//     const handleUserClick = (user) => {\r\n//         navigate('/profile', { state: { user } });\r\n//     };\r\n\r\n//     const handleFileChange = (e) => {\r\n//         const file = e.target.files[0];\r\n//         setNewFile(file);\r\n//         if (file) {\r\n//             const reader = new FileReader();\r\n//             reader.onloadend = () => {\r\n//                 setFilePreview(reader.result);\r\n//             };\r\n//             reader.readAsDataURL(file);\r\n//         } else {\r\n//             setFilePreview(null);\r\n//         }\r\n//     };\r\n\r\n//     const handleFileDownload = (fileUrl) => {\r\n//         const filename = fileUrl.split('/').pop();\r\n//         download(fileUrl, filename);\r\n//     };\r\n\r\n//     return (\r\n//         <div style={{ paddingLeft: '100px', marginTop: '7rem', position: 'relative', overflow: 'hidden' }}>\r\n//             <Divider horizontal >Feed</Divider>\r\n//             <div style={{ paddingBottom: '4rem', marginBottom: '4rem' }}>\r\n//                 <CommentGroup threaded size='large'>\r\n//                     {comments.map((comment, index) => (\r\n//                         <Comment key={comment._id}>\r\n//                             <CommentAvatar as='a' src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'} />\r\n//                             <CommentContent>\r\n//                                 <CommentAuthor as='a' onClick={() => handleUserClick(comment.createdBy)}>\r\n//                                     {comment.createdBy.firstName} {comment.createdBy.lastName}\r\n//                                 </CommentAuthor>\r\n//                                 <CommentMetadata>\r\n//                                     <span>{comment.createdAt}</span>\r\n//                                 </CommentMetadata>\r\n//                                 <CommentText>{comment.textContent}</CommentText>\r\n//                                 {comment.uploadContent && (\r\n//                                     <CommentText>\r\n//                                         <Button\r\n//                                             icon\r\n//                                             labelPosition='left'\r\n//                                             onClick={() =>\r\n//                                                 handleFileDownload(`http://localhost:8000/feed${comment.uploadContent}`)\r\n//                                             }\r\n//                                         >\r\n//                                             <Icon name='file alternate' />\r\n//                                             {`http://localhost:8000/feed${comment.uploadContent}`.split('/').pop()}\r\n//                                         </Button>\r\n//                                     </CommentText>\r\n//                                 )}\r\n//                                 <CommentActions>\r\n//                                     <a onClick={() => startReply(index)}>Reply</a>\r\n//                                 </CommentActions>\r\n//                                 {comment.replies && comment.replies.length > 0 && (\r\n//                                     <CommentGroup style={{ marginTop: '0.1px' }}>\r\n//                                         {comment.replies.map((reply) => (\r\n//                                             <Comment key={reply._id}>\r\n//                                                 <CommentAvatar\r\n//                                                     as='a'\r\n//                                                     src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'}\r\n//                                                 />\r\n//                                                 <CommentContent>\r\n//                                                     <CommentAuthor as='a' onClick={() => handleUserClick(reply.createdBy)}>\r\n//                                                         {reply.createdBy.firstName} {reply.createdBy.lastName}\r\n//                                                     </CommentAuthor>\r\n//                                                     <CommentMetadata>\r\n//                                                         <span>{reply.createdAt}</span>\r\n//                                                     </CommentMetadata>\r\n//                                                     <CommentText>{reply.textContent}</CommentText>\r\n//                                                 </CommentContent>\r\n//                                             </Comment>\r\n//                                         ))}\r\n//                                     </CommentGroup>\r\n//                                 )}\r\n//                                 {replyingIndex === index && (\r\n//                                     <Form reply>\r\n//                                         <FormTextArea\r\n//                                             value={replyText}\r\n//                                             onChange={(e) => setReplyText(e.target.value)}\r\n//                                             placeholder='Write a reply...'\r\n//                                         />\r\n//                                         <Button\r\n//                                             content='Add Reply'\r\n//                                             labelPosition='left'\r\n//                                             icon='edit'\r\n//                                             primary\r\n//                                             onClick={() => handleAddReply(comment._id)}\r\n//                                         />\r\n//                                     </Form>\r\n//                                 )}\r\n//                             </CommentContent>\r\n//                         </Comment>\r\n//                     ))}\r\n//                 </CommentGroup>\r\n//             </div>\r\n//             <div style={{ position: 'relative', bottom: '0', width: '50%', background: 'white', padding: '1rem' }}>\r\n//                 <Form reply>\r\n//                     <FormTextArea\r\n//                         value={newComment}\r\n//                         onChange={(e) => setNewComment(e.target.value)}\r\n//                         placeholder='Send a message'\r\n//                     />\r\n//                     {filePreview && (\r\n//                         <div>\r\n//                             <img src={filePreview} alt=\"Preview\" style={{ maxHeight: '200px', marginBottom: '10px' }} />\r\n//                         </div>\r\n//                     )}\r\n//                     <Button content='Send' labelPosition='left' icon='send' onClick={handleAddComment} />\r\n//                     <Button as=\"label\" icon labelPosition='left'>\r\n//                         <Icon name='upload' />\r\n//                         Upload File\r\n//                         <input type=\"file\" hidden onChange={handleFileChange} />\r\n//                     </Button>\r\n//                 </Form>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default TeamFeed;\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
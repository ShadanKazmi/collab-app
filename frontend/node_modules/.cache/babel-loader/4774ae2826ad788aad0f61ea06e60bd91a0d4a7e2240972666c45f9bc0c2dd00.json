{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shadan Syed Kazmi\\\\Projects\\\\msteams-clone\\\\frontend\\\\src\\\\api\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\n// import React, { createContext, useEffect, useState } from \"react\";\n// import Cookies from 'js-cookie';\n// import axios from \"axios\";\n\n// export const authContext = createContext(null);\n\n// export const AuthProvider = (props) => {\n//     const [userState, setUserState] = useState('Logged-Out');\n//     const [token, setToken] = useState(Cookies.get(\"token\"));\n//     const [user, setUser] = useState(null);\n//     useEffect(() => {\n//         const token = Cookies.get(\"token\");\n//         const userId = Cookies.get(\"userId\");\n//         if (token && userId) {\n//             setUserState(\"Logged-In\");\n//             setToken(token);\n//             fetchUserDetails(userId);\n//         }\n//     }, []);\n\n//     const fetchUserDetails = async (userId) => {\n//         try {\n//             const response = await axios.get(`https://collab-app-backend.onrender.com/userAuth/${userId}`);\n//             const userData = response.data;\n//             setUser(userData);\n\n//         } catch (error) {\n//             console.error('Error fetching user details:', error);\n//         }\n//     };\n\n//     const login = (newToken, userData) => {\n//         if (newToken && userData) {\n//             setToken(newToken);\n//             setUser(userData);\n//             setUserState(\"Logged-In\");\n//             Cookies.set(\"token\", newToken, { expires: 7 });\n//             Cookies.set(\"userId\", userData.userId, { expires: 7 });\n//         } else {\n//             console.log(\"No valid token or user data provided for login.\");\n//         }\n//     };\n\n//     const logout = () => {\n//         setToken(null);\n//         setUser(null);\n//         setUserState('Logged-Out');\n//         Cookies.remove(\"token\");\n//         Cookies.remove(\"userId\");\n//     };\n//     console.log(userState);\n//     return (\n//         <authContext.Provider value={{ userState, setUserState, token, user, login, logout }}>\n//             {props.children}\n//         </authContext.Provider>\n//     );\n// };\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport Cookies from 'js-cookie';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const authContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = props => {\n  _s();\n  const [userState, setUserState] = useState('Logged-Out');\n  const [token, setToken] = useState(Cookies.get(\"token\"));\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true); // Add loading state\n\n  useEffect(() => {\n    const token = Cookies.get(\"token\");\n    const userId = Cookies.get(\"userId\");\n    if (token && userId) {\n      setUserState(\"Logged-In\");\n      setToken(token);\n      fetchUserDetails(userId);\n    } else {\n      setLoading(false); // Set loading to false if no token or userId\n    }\n  }, []);\n  const fetchUserDetails = async userId => {\n    try {\n      const response = await axios.get(`https://collab-app-backend.onrender.com/userAuth/${userId}`);\n      const userData = response.data;\n      setUser(userData);\n    } catch (error) {\n      console.error('Error fetching user details:', error);\n    } finally {\n      setLoading(false); // Set loading to false after fetching user details\n    }\n  };\n  const login = (newToken, userData) => {\n    if (newToken && userData) {\n      setToken(newToken);\n      setUser(userData);\n      setUserState(\"Logged-In\");\n      Cookies.set(\"token\", newToken, {\n        expires: 7\n      });\n      Cookies.set(\"userId\", userData.userId, {\n        expires: 7\n      });\n    } else {\n      console.log(\"No valid token or user data provided for login.\");\n    }\n  };\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    setUserState('Logged-Out');\n    Cookies.remove(\"token\");\n    Cookies.remove(\"userId\");\n  };\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: {\n      userState,\n      setUserState,\n      token,\n      user,\n      login,\n      logout,\n      loading\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"dOx7VfhndpaWEjrOInYBtPgqpt4=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","Cookies","axios","jsxDEV","_jsxDEV","authContext","AuthProvider","props","_s","userState","setUserState","token","setToken","get","user","setUser","loading","setLoading","userId","fetchUserDetails","response","userData","data","error","console","login","newToken","set","expires","log","logout","remove","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Shadan Syed Kazmi/Projects/msteams-clone/frontend/src/api/AuthContext.jsx"],"sourcesContent":["// import React, { createContext, useEffect, useState } from \"react\";\r\n// import Cookies from 'js-cookie';\r\n// import axios from \"axios\";\r\n\r\n// export const authContext = createContext(null);\r\n\r\n// export const AuthProvider = (props) => {\r\n//     const [userState, setUserState] = useState('Logged-Out');\r\n//     const [token, setToken] = useState(Cookies.get(\"token\"));\r\n//     const [user, setUser] = useState(null);\r\n//     useEffect(() => {\r\n//         const token = Cookies.get(\"token\");\r\n//         const userId = Cookies.get(\"userId\");\r\n//         if (token && userId) {\r\n//             setUserState(\"Logged-In\");\r\n//             setToken(token);\r\n//             fetchUserDetails(userId);\r\n//         }\r\n//     }, []);\r\n\r\n//     const fetchUserDetails = async (userId) => {\r\n//         try {\r\n//             const response = await axios.get(`https://collab-app-backend.onrender.com/userAuth/${userId}`);\r\n//             const userData = response.data;\r\n//             setUser(userData);\r\n            \r\n//         } catch (error) {\r\n//             console.error('Error fetching user details:', error);\r\n//         }\r\n//     };\r\n\r\n//     const login = (newToken, userData) => {\r\n//         if (newToken && userData) {\r\n//             setToken(newToken);\r\n//             setUser(userData);\r\n//             setUserState(\"Logged-In\");\r\n//             Cookies.set(\"token\", newToken, { expires: 7 });\r\n//             Cookies.set(\"userId\", userData.userId, { expires: 7 });\r\n//         } else {\r\n//             console.log(\"No valid token or user data provided for login.\");\r\n//         }\r\n//     };\r\n\r\n//     const logout = () => {\r\n//         setToken(null);\r\n//         setUser(null);\r\n//         setUserState('Logged-Out');\r\n//         Cookies.remove(\"token\");\r\n//         Cookies.remove(\"userId\");\r\n//     };\r\n//     console.log(userState);\r\n//     return (\r\n//         <authContext.Provider value={{ userState, setUserState, token, user, login, logout }}>\r\n//             {props.children}\r\n//         </authContext.Provider>\r\n//     );\r\n// };\r\n\r\nimport React, { createContext, useEffect, useState } from \"react\";\r\nimport Cookies from 'js-cookie';\r\nimport axios from \"axios\";\r\n\r\nexport const authContext = createContext(null);\r\n\r\nexport const AuthProvider = (props) => {\r\n    const [userState, setUserState] = useState('Logged-Out');\r\n    const [token, setToken] = useState(Cookies.get(\"token\"));\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true); // Add loading state\r\n\r\n    useEffect(() => {\r\n        const token = Cookies.get(\"token\");\r\n        const userId = Cookies.get(\"userId\");\r\n        if (token && userId) {\r\n            setUserState(\"Logged-In\");\r\n            setToken(token);\r\n            fetchUserDetails(userId);\r\n        } else {\r\n            setLoading(false); // Set loading to false if no token or userId\r\n        }\r\n    }, []);\r\n\r\n    const fetchUserDetails = async (userId) => {\r\n        try {\r\n            const response = await axios.get(`https://collab-app-backend.onrender.com/userAuth/${userId}`);\r\n            const userData = response.data;\r\n            setUser(userData);\r\n        } catch (error) {\r\n            console.error('Error fetching user details:', error);\r\n        } finally {\r\n            setLoading(false); // Set loading to false after fetching user details\r\n        }\r\n    };\r\n\r\n    const login = (newToken, userData) => {\r\n        if (newToken && userData) {\r\n            setToken(newToken);\r\n            setUser(userData);\r\n            setUserState(\"Logged-In\");\r\n            Cookies.set(\"token\", newToken, { expires: 7 });\r\n            Cookies.set(\"userId\", userData.userId, { expires: 7 });\r\n        } else {\r\n            console.log(\"No valid token or user data provided for login.\");\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        setToken(null);\r\n        setUser(null);\r\n        setUserState('Logged-Out');\r\n        Cookies.remove(\"token\");\r\n        Cookies.remove(\"userId\");\r\n    };\r\n\r\n    return (\r\n        <authContext.Provider value={{ userState, setUserState, token, user, login, logout, loading }}>\r\n            {props.children}\r\n        </authContext.Provider>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
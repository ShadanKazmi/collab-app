{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shadan Syed Kazmi\\\\Projects\\\\msteams-clone\\\\frontend\\\\src\\\\Components\\\\TeamFeed.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import {\n//     CommentText,\n//     CommentMetadata,\n//     CommentGroup,\n//     CommentContent,\n//     CommentAvatar,\n//     CommentActions,\n//     CommentAuthor,\n//     Comment,\n//     Form,\n//     FormTextArea,\n//     Button,\n//     Icon,\n// } from 'semantic-ui-react';\n// import axios from 'axios';\n// import { useParams } from 'react-router-dom';\n\n// const TeamFeed = () => {\n//     const { teamId } = useParams();\n//     const [comments, setComments] = useState([]);\n//     const [newComment, setNewComment] = useState('');\n//     const [replyText, setReplyText] = useState('');\n//     const [replyingIndex, setReplyingIndex] = useState(null);\n\n//     useEffect(() => {\n//         const fetchMessages = async () => {\n//             try {\n//                 const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\n//                 setComments(response.data);\n//             } catch (error) {\n//                 console.error('Error fetching messages:', error);\n//             }\n//         };\n\n//         fetchMessages();\n//     }, [teamId]);\n\n//     const handleAddComment = async () => {\n//         if (newComment.trim() !== '') {\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n//             const userId = localStorage.getItem('userId');\n//             const commentData = {\n//                 textContent: newComment,\n//                 createdBy: userId,\n//                 createdAt: currentDate,\n//                 replies: [],\n//             };\n\n//             try {\n//                 const response = await axios.post('http://localhost:8000/feed/', {\n//                     textContent: newComment,\n//                     teamId: teamId,\n//                     userId: userId,\n//                 });\n\n//                 const savedMessage = response.data;\n//                 commentData._id = savedMessage._id; // Assuming saved message returns its ID\n//                 setComments([...comments, commentData]);\n//                 setNewComment('');\n//             } catch (error) {\n//                 console.error('Error adding message:', error);\n//             }\n//         }\n//     };\n\n//     return (\n//         <div style={{ paddingLeft: '100px', marginTop: '7rem', position: 'relative', overflow: \"hidden\" }}>\n//             <div style={{ paddingBottom: '4rem', marginBottom: '4rem' }}>\n//                 <CommentGroup threaded size='large'>\n//                     {comments.map((comment, index) => (\n//                         <Comment key={comment._id}>\n//                             <CommentAvatar as='a' src='https://react.semantic-ui.com/images/avatar/small/matt.jpg' />\n//                             <CommentContent>\n//                                 <CommentAuthor as='a'>{comment.createdBy.firstName} {comment.createdBy.lastName}</CommentAuthor>\n//                                 <CommentMetadata>\n//                                     <span>{comment.createdAt}</span>\n//                                 </CommentMetadata>\n//                                 <CommentText>{comment.textContent}</CommentText>\n//                                 <CommentActions>\n//                                     <a>Reply</a>\n//                                 </CommentActions>\n//                             </CommentContent>\n//                         </Comment>\n//                     ))}\n//                 </CommentGroup>\n\n//             </div>\n//             <div style={{ position: 'fixed', bottom: '0', width: '50%', background: 'white', padding: '1rem' }}>\n//                 <Form reply>\n//                     <FormTextArea\n//                         value={newComment}\n//                         onChange={(e) => setNewComment(e.target.value)}\n//                         placeholder='Send a message'\n//                     />\n//                     <Button\n//                         content='Send'\n//                         labelPosition='left'\n//                         icon='send'\n//                         onClick={handleAddComment}\n//                     />\n//                     <Button icon labelPosition='left' >\n//                         <Icon name='upload' />\n//                         Upload File\n//                     </Button>\n//                 </Form>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default TeamFeed;\n\nimport React, { useState, useEffect } from 'react';\nimport { CommentText, CommentMetadata, CommentGroup, CommentContent, CommentAvatar, CommentActions, CommentAuthor, Comment, Form, FormTextArea, Button, Icon } from 'semantic-ui-react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TeamFeed = () => {\n  _s();\n  const {\n    teamId\n  } = useParams();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [replyText, setReplyText] = useState('');\n  const [replyingIndex, setReplyingIndex] = useState(null);\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\n        setComments(response.data);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n    fetchMessages();\n  }, [teamId]);\n\n  // const handleAddComment = async () => {\n  //     if (newComment.trim() !== '') {\n  //         const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n  //         const userId = localStorage.getItem('userId');\n  //         const commentData = {\n  //             textContent: newComment,\n  //             createdBy: {\n  //                 _id: userId, // Assuming userId is stored as a string\n  //                 firstName: 'YourFirstName', // Replace with actual user data or fetch user info\n  //                 lastName: 'YourLastName', // Replace with actual user data or fetch user info\n  //             },\n  //             createdAt: currentDate,\n  //             replies: [],\n  //         };\n\n  //         try {\n  //             const response = await axios.post('http://localhost:8000/feed/', {\n  //                 textContent: newComment,\n  //                 teamId: teamId,\n  //                 userId: userId,\n  //             });\n\n  //             const savedMessage = response.data;\n  //             commentData._id = savedMessage._id; // Assuming saved message returns its ID\n  //             setComments([...comments, commentData]);\n  //             setNewComment('');\n  //         } catch (error) {\n  //             console.error('Error adding message:', error);\n  //         }\n  //     }\n  // };\n\n  const getCurrentUser = async userId => {\n    try {\n      const response = await axios.get(`http://localhost:8000/userAuth/${userId}`); // Replace with your actual user API endpoint\n      return response.data; // Assuming your user API returns an object with firstName and lastName\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      return null;\n    }\n  };\n  const handleAddComment = async () => {\n    if (newComment.trim() !== '') {\n      const currentDate = new Date().toLocaleString('en-US', {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      });\n      const userId = localStorage.getItem('userId');\n\n      // Fetch current user's details\n      const currentUser = await getCurrentUser(userId);\n      if (!currentUser) {\n        console.error('User not found.');\n        return;\n      }\n      const commentData = {\n        textContent: newComment,\n        createdBy: {\n          _id: userId,\n          firstName: currentUser.firstName,\n          lastName: currentUser.lastName\n        },\n        createdAt: currentDate,\n        replies: []\n      };\n      try {\n        const response = await axios.post('http://localhost:8000/feed/', {\n          textContent: newComment,\n          teamId: teamId,\n          userId: userId\n        });\n        const savedMessage = response.data;\n        commentData._id = savedMessage._id;\n        setComments([...comments, commentData]);\n        setNewComment('');\n      } catch (error) {\n        console.error('Error adding message:', error);\n      }\n    }\n  };\n  const handleAddReply = async commentId => {\n    const currentUser = await getCurrentUser(userId);\n    if (replyText.trim() !== '') {\n      const currentDate = new Date().toLocaleString('en-US', {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      });\n      const userId = localStorage.getItem('userId');\n      const replyData = {\n        textContent: replyText,\n        createdBy: {\n          _id: userId,\n          // Assuming userId is stored as a string\n          firstName: 'YourFirstName',\n          lastName: 'YourLastName'\n        },\n        createdAt: currentDate\n      };\n      try {\n        const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\n          textContent: replyText,\n          userId: userId\n        });\n        const updatedComments = comments.map(comment => comment._id === commentId ? {\n          ...comment,\n          replies: [...comment.replies, response.data]\n        } : comment);\n        setComments(updatedComments);\n        setReplyText('');\n        setReplyingIndex(null);\n      } catch (error) {\n        console.error('Error adding reply:', error);\n      }\n    }\n  };\n  const startReply = index => {\n    setReplyingIndex(index);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      paddingLeft: '100px',\n      marginTop: '7rem',\n      position: 'relative',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: '4rem',\n        marginBottom: '4rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(CommentGroup, {\n        threaded: true,\n        size: \"large\",\n        children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(Comment, {\n          children: [/*#__PURE__*/_jsxDEV(CommentAvatar, {\n            as: \"a\",\n            src: \"https://react.semantic-ui.com/images/avatar/small/matt.jpg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(CommentContent, {\n            children: [/*#__PURE__*/_jsxDEV(CommentAuthor, {\n              as: \"a\",\n              children: [comment.createdBy.firstName, \" \", comment.createdBy.lastName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CommentMetadata, {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: comment.createdAt\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CommentText, {\n              children: comment.textContent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CommentActions, {\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                onClick: () => startReply(index),\n                children: \"Reply\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 33\n            }, this), comment.replies && comment.replies.length > 0 && /*#__PURE__*/_jsxDEV(CommentGroup, {\n              style: {\n                marginTop: \"1px\"\n              },\n              children: comment.replies.map(reply => /*#__PURE__*/_jsxDEV(Comment, {\n                children: [/*#__PURE__*/_jsxDEV(CommentAvatar, {\n                  as: \"a\",\n                  src: \"https://react.semantic-ui.com/images/avatar/small/jenny.jpg\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 300,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(CommentContent, {\n                  children: [/*#__PURE__*/_jsxDEV(CommentAuthor, {\n                    as: \"a\",\n                    children: [reply.createdBy.firstName, \" \", reply.createdBy.lastName]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 305,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(CommentMetadata, {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: reply.createdAt\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 309,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 308,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(CommentText, {\n                    children: reply.textContent\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 304,\n                  columnNumber: 49\n                }, this)]\n              }, reply._id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 37\n            }, this), replyingIndex === index && /*#__PURE__*/_jsxDEV(Form, {\n              reply: true,\n              children: [/*#__PURE__*/_jsxDEV(FormTextArea, {\n                value: replyText,\n                onChange: e => setReplyText(e.target.value),\n                placeholder: \"Write a reply...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                content: \"Add Reply\",\n                labelPosition: \"left\",\n                icon: \"edit\",\n                primary: true,\n                onClick: () => handleAddReply(comment._id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 29\n          }, this)]\n        }, comment._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        bottom: '0',\n        width: '50%',\n        background: 'white',\n        padding: '1rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        reply: true,\n        children: [/*#__PURE__*/_jsxDEV(FormTextArea, {\n          value: newComment,\n          onChange: e => setNewComment(e.target.value),\n          placeholder: \"Send a message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          content: \"Send\",\n          labelPosition: \"left\",\n          icon: \"send\",\n          onClick: handleAddComment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          icon: true,\n          labelPosition: \"left\",\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 25\n          }, this), \"Upload File\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 9\n  }, this);\n};\n_s(TeamFeed, \"thM26MRwNWiWLKfWKloIqmuJ+Bs=\", false, function () {\n  return [useParams];\n});\n_c = TeamFeed;\nexport default TeamFeed;\nvar _c;\n$RefreshReg$(_c, \"TeamFeed\");","map":{"version":3,"names":["React","useState","useEffect","CommentText","CommentMetadata","CommentGroup","CommentContent","CommentAvatar","CommentActions","CommentAuthor","Comment","Form","FormTextArea","Button","Icon","axios","useParams","jsxDEV","_jsxDEV","TeamFeed","_s","teamId","comments","setComments","newComment","setNewComment","replyText","setReplyText","replyingIndex","setReplyingIndex","fetchMessages","response","get","data","error","console","getCurrentUser","userId","handleAddComment","trim","currentDate","Date","toLocaleString","hour","minute","hour12","localStorage","getItem","currentUser","commentData","textContent","createdBy","_id","firstName","lastName","createdAt","replies","post","savedMessage","handleAddReply","commentId","replyData","updatedComments","map","comment","startReply","index","style","paddingLeft","marginTop","position","overflow","children","paddingBottom","marginBottom","threaded","size","as","src","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","reply","value","onChange","e","target","placeholder","content","labelPosition","icon","primary","bottom","width","background","padding","name","_c","$RefreshReg$"],"sources":["C:/Users/Shadan Syed Kazmi/Projects/msteams-clone/frontend/src/Components/TeamFeed.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import {\r\n//     CommentText,\r\n//     CommentMetadata,\r\n//     CommentGroup,\r\n//     CommentContent,\r\n//     CommentAvatar,\r\n//     CommentActions,\r\n//     CommentAuthor,\r\n//     Comment,\r\n//     Form,\r\n//     FormTextArea,\r\n//     Button,\r\n//     Icon,\r\n// } from 'semantic-ui-react';\r\n// import axios from 'axios';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const TeamFeed = () => {\r\n//     const { teamId } = useParams();\r\n//     const [comments, setComments] = useState([]);\r\n//     const [newComment, setNewComment] = useState('');\r\n//     const [replyText, setReplyText] = useState('');\r\n//     const [replyingIndex, setReplyingIndex] = useState(null);\r\n\r\n//     useEffect(() => {\r\n//         const fetchMessages = async () => {\r\n//             try {\r\n//                 const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\r\n//                 setComments(response.data);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching messages:', error);\r\n//             }\r\n//         };\r\n\r\n//         fetchMessages();\r\n//     }, [teamId]);\r\n\r\n//     const handleAddComment = async () => {\r\n//         if (newComment.trim() !== '') {\r\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n//             const userId = localStorage.getItem('userId');\r\n//             const commentData = {\r\n//                 textContent: newComment,\r\n//                 createdBy: userId,\r\n//                 createdAt: currentDate,\r\n//                 replies: [],\r\n//             };\r\n\r\n//             try {\r\n//                 const response = await axios.post('http://localhost:8000/feed/', {\r\n//                     textContent: newComment,\r\n//                     teamId: teamId,\r\n//                     userId: userId,\r\n//                 });\r\n\r\n//                 const savedMessage = response.data;\r\n//                 commentData._id = savedMessage._id; // Assuming saved message returns its ID\r\n//                 setComments([...comments, commentData]);\r\n//                 setNewComment('');\r\n//             } catch (error) {\r\n//                 console.error('Error adding message:', error);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div style={{ paddingLeft: '100px', marginTop: '7rem', position: 'relative', overflow: \"hidden\" }}>\r\n//             <div style={{ paddingBottom: '4rem', marginBottom: '4rem' }}>\r\n//                 <CommentGroup threaded size='large'>\r\n//                     {comments.map((comment, index) => (\r\n//                         <Comment key={comment._id}>\r\n//                             <CommentAvatar as='a' src='https://react.semantic-ui.com/images/avatar/small/matt.jpg' />\r\n//                             <CommentContent>\r\n//                                 <CommentAuthor as='a'>{comment.createdBy.firstName} {comment.createdBy.lastName}</CommentAuthor>\r\n//                                 <CommentMetadata>\r\n//                                     <span>{comment.createdAt}</span>\r\n//                                 </CommentMetadata>\r\n//                                 <CommentText>{comment.textContent}</CommentText>\r\n//                                 <CommentActions>\r\n//                                     <a>Reply</a>\r\n//                                 </CommentActions>\r\n//                             </CommentContent>\r\n//                         </Comment>\r\n//                     ))}\r\n//                 </CommentGroup>\r\n\r\n//             </div>\r\n//             <div style={{ position: 'fixed', bottom: '0', width: '50%', background: 'white', padding: '1rem' }}>\r\n//                 <Form reply>\r\n//                     <FormTextArea\r\n//                         value={newComment}\r\n//                         onChange={(e) => setNewComment(e.target.value)}\r\n//                         placeholder='Send a message'\r\n//                     />\r\n//                     <Button\r\n//                         content='Send'\r\n//                         labelPosition='left'\r\n//                         icon='send'\r\n//                         onClick={handleAddComment}\r\n//                     />\r\n//                     <Button icon labelPosition='left' >\r\n//                         <Icon name='upload' />\r\n//                         Upload File\r\n//                     </Button>\r\n//                 </Form>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default TeamFeed;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n    CommentText,\r\n    CommentMetadata,\r\n    CommentGroup,\r\n    CommentContent,\r\n    CommentAvatar,\r\n    CommentActions,\r\n    CommentAuthor,\r\n    Comment,\r\n    Form,\r\n    FormTextArea,\r\n    Button,\r\n    Icon,\r\n} from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst TeamFeed = () => {\r\n    const { teamId } = useParams();\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [replyText, setReplyText] = useState('');\r\n    const [replyingIndex, setReplyingIndex] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\r\n                setComments(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching messages:', error);\r\n            }\r\n        };\r\n\r\n        fetchMessages();\r\n    }, [teamId]);\r\n\r\n    // const handleAddComment = async () => {\r\n    //     if (newComment.trim() !== '') {\r\n    //         const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n    //         const userId = localStorage.getItem('userId');\r\n    //         const commentData = {\r\n    //             textContent: newComment,\r\n    //             createdBy: {\r\n    //                 _id: userId, // Assuming userId is stored as a string\r\n    //                 firstName: 'YourFirstName', // Replace with actual user data or fetch user info\r\n    //                 lastName: 'YourLastName', // Replace with actual user data or fetch user info\r\n    //             },\r\n    //             createdAt: currentDate,\r\n    //             replies: [],\r\n    //         };\r\n\r\n    //         try {\r\n    //             const response = await axios.post('http://localhost:8000/feed/', {\r\n    //                 textContent: newComment,\r\n    //                 teamId: teamId,\r\n    //                 userId: userId,\r\n    //             });\r\n\r\n    //             const savedMessage = response.data;\r\n    //             commentData._id = savedMessage._id; // Assuming saved message returns its ID\r\n    //             setComments([...comments, commentData]);\r\n    //             setNewComment('');\r\n    //         } catch (error) {\r\n    //             console.error('Error adding message:', error);\r\n    //         }\r\n    //     }\r\n    // };\r\n\r\n    const getCurrentUser = async (userId) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:8000/userAuth/${userId}`); // Replace with your actual user API endpoint\r\n            return response.data; // Assuming your user API returns an object with firstName and lastName\r\n        } catch (error) {\r\n            console.error('Error fetching user:', error);\r\n            return null;\r\n        }\r\n    };\r\n\r\n\r\n    const handleAddComment = async () => {\r\n        if (newComment.trim() !== '') {\r\n            const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n            const userId = localStorage.getItem('userId');\r\n\r\n            // Fetch current user's details\r\n            const currentUser = await getCurrentUser(userId);\r\n            if (!currentUser) {\r\n                console.error('User not found.');\r\n                return;\r\n            }\r\n\r\n            const commentData = {\r\n                textContent: newComment,\r\n                createdBy: {\r\n                    _id: userId,\r\n                    firstName: currentUser.firstName,\r\n                    lastName: currentUser.lastName,\r\n                },\r\n                createdAt: currentDate,\r\n                replies: [],\r\n            };\r\n\r\n            try {\r\n                const response = await axios.post('http://localhost:8000/feed/', {\r\n                    textContent: newComment,\r\n                    teamId: teamId,\r\n                    userId: userId,\r\n                });\r\n\r\n                const savedMessage = response.data;\r\n                commentData._id = savedMessage._id;\r\n                setComments([...comments, commentData]);\r\n                setNewComment('');\r\n            } catch (error) {\r\n                console.error('Error adding message:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleAddReply = async (commentId) => {\r\n        const currentUser = await getCurrentUser(userId);\r\n        \r\n        if (replyText.trim() !== '') {\r\n            const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n            const userId = localStorage.getItem('userId'); \r\n            const replyData = {\r\n                textContent: replyText,\r\n                createdBy: {\r\n                    _id: userId, // Assuming userId is stored as a string\r\n                    firstName: 'YourFirstName', \r\n                    lastName: 'YourLastName', \r\n                },\r\n                createdAt: currentDate,\r\n            };\r\n\r\n            try {\r\n                const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\r\n                    textContent: replyText,\r\n                    userId: userId,\r\n                });\r\n\r\n                const updatedComments = comments.map(comment =>\r\n                    comment._id === commentId\r\n                        ? {\r\n                              ...comment,\r\n                              replies: [...comment.replies, response.data],\r\n                          }\r\n                        : comment\r\n                );\r\n                setComments(updatedComments);\r\n                setReplyText('');\r\n                setReplyingIndex(null);\r\n            } catch (error) {\r\n                console.error('Error adding reply:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const startReply = (index) => {\r\n        setReplyingIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div style={{ paddingLeft: '100px', marginTop: '7rem', position: 'relative', overflow: 'hidden' }}>\r\n            <div style={{ paddingBottom: '4rem', marginBottom: '4rem' }}>\r\n                <CommentGroup threaded size='large'>\r\n                    {comments.map((comment, index) => (\r\n                        <Comment key={comment._id}>\r\n                            <CommentAvatar as='a' src='https://react.semantic-ui.com/images/avatar/small/matt.jpg' />\r\n                            <CommentContent>\r\n                                <CommentAuthor as='a'>\r\n                                    {comment.createdBy.firstName} {comment.createdBy.lastName}\r\n                                </CommentAuthor>\r\n                                <CommentMetadata>\r\n                                    <span>{comment.createdAt}</span>\r\n                                </CommentMetadata>\r\n                                <CommentText>{comment.textContent}</CommentText>\r\n                                <CommentActions>\r\n                                    <a onClick={() => startReply(index)}>Reply</a>\r\n                                </CommentActions>\r\n                                {comment.replies && comment.replies.length > 0 && (\r\n                                    <CommentGroup style={{marginTop:\"1px\",}}>\r\n                                        {comment.replies.map((reply) => (\r\n                                            <Comment key={reply._id}>\r\n                                                <CommentAvatar\r\n                                                    as='a'\r\n                                                    src='https://react.semantic-ui.com/images/avatar/small/jenny.jpg'\r\n                                                />\r\n                                                <CommentContent>\r\n                                                    <CommentAuthor as='a'>\r\n                                                        {reply.createdBy.firstName} {reply.createdBy.lastName}\r\n                                                    </CommentAuthor>\r\n                                                    <CommentMetadata>\r\n                                                        <span>{reply.createdAt}</span>\r\n                                                    </CommentMetadata>\r\n                                                    <CommentText>{reply.textContent}</CommentText>\r\n                                                </CommentContent>\r\n                                            </Comment>\r\n                                        ))}\r\n                                    </CommentGroup>\r\n                                )}\r\n                                {replyingIndex === index && (\r\n                                    <Form reply>\r\n                                        <FormTextArea\r\n                                            value={replyText}\r\n                                            onChange={(e) => setReplyText(e.target.value)}\r\n                                            placeholder='Write a reply...'\r\n                                        />\r\n                                        <Button\r\n                                            content='Add Reply'\r\n                                            labelPosition='left'\r\n                                            icon='edit'\r\n                                            primary\r\n                                            onClick={() => handleAddReply(comment._id)}\r\n                                        />\r\n                                    </Form>\r\n                                )}\r\n                            </CommentContent>\r\n                        </Comment>\r\n                    ))}\r\n                </CommentGroup>\r\n            </div>\r\n            <div style={{ position: 'fixed', bottom: '0', width: '50%', background: 'white', padding: '1rem' }}>\r\n                <Form reply>\r\n                    <FormTextArea\r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder='Send a message'\r\n                    />\r\n                    <Button content='Send' labelPosition='left' icon='send' onClick={handleAddComment} />\r\n                    <Button icon labelPosition='left'>\r\n                        <Icon name='upload' />\r\n                        Upload File\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TeamFeed;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shadan Syed Kazmi\\\\Projects\\\\msteams-clone\\\\frontend\\\\src\\\\api\\\\ChatContext.jsx\",\n  _s = $RefreshSig$();\n// import React, { createContext, useState } from 'react';\n\n// export const MessageContext = createContext();\n\n// export const MessageProvider = ({ children }) => {\n//   const [selectedUser, setSelectedUser] = useState(null); // To store the selected user for messaging\n//   const [chats, setChats] = useState([]); // Array to store chats\n\n//   const addChat = (chat) => {\n//     setChats([...chats, chat]);\n//   };\n\n//   return (\n//     <MessageContext.Provider value={{ selectedUser, setSelectedUser,chats, addChat  }}>\n//       {children}\n//     </MessageContext.Provider>\n//   );\n// };\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MessageContext = /*#__PURE__*/createContext();\nexport const MessageProvider = ({\n  children\n}) => {\n  _s();\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [chats, setChats] = useState([]);\n\n  // Function to add a chat to the state and cookies\n  const addChat = chat => {\n    const updatedChats = [...chats, chat];\n    setChats(updatedChats);\n    Cookies.set('chats', JSON.stringify(updatedChats), {\n      expires: 7\n    }); // Set cookie with 7 days expiration\n  };\n  useEffect(() => {\n    // Retrieve chats from cookies on component mount\n    const storedChats = Cookies.get('chats');\n    if (storedChats) {\n      setChats(JSON.parse(storedChats));\n    }\n  }, []); // Empty dependency array ensures this effect runs only once on mount\n\n  return /*#__PURE__*/_jsxDEV(MessageContext.Provider, {\n    value: {\n      selectedUser,\n      setSelectedUser,\n      chats,\n      addChat\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageProvider, \"kSX9yOdNpqoGoWwbXiv5tr5TajM=\");\n_c = MessageProvider;\nvar _c;\n$RefreshReg$(_c, \"MessageProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","Cookies","jsxDEV","_jsxDEV","MessageContext","MessageProvider","children","_s","selectedUser","setSelectedUser","chats","setChats","addChat","chat","updatedChats","set","JSON","stringify","expires","storedChats","get","parse","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Shadan Syed Kazmi/Projects/msteams-clone/frontend/src/api/ChatContext.jsx"],"sourcesContent":["// import React, { createContext, useState } from 'react';\r\n\r\n// export const MessageContext = createContext();\r\n\r\n// export const MessageProvider = ({ children }) => {\r\n//   const [selectedUser, setSelectedUser] = useState(null); // To store the selected user for messaging\r\n//   const [chats, setChats] = useState([]); // Array to store chats\r\n\r\n//   const addChat = (chat) => {\r\n//     setChats([...chats, chat]);\r\n//   };\r\n\r\n\r\n//   return (\r\n//     <MessageContext.Provider value={{ selectedUser, setSelectedUser,chats, addChat  }}>\r\n//       {children}\r\n//     </MessageContext.Provider>\r\n//   );\r\n// };\r\n\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport Cookies from 'js-cookie';\r\n\r\nexport const MessageContext = createContext();\r\n\r\nexport const MessageProvider = ({ children }) => {\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [chats, setChats] = useState([]);\r\n\r\n  // Function to add a chat to the state and cookies\r\n  const addChat = (chat) => {\r\n    const updatedChats = [...chats, chat];\r\n    setChats(updatedChats);\r\n    Cookies.set('chats', JSON.stringify(updatedChats), { expires: 7 }); // Set cookie with 7 days expiration\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Retrieve chats from cookies on component mount\r\n    const storedChats = Cookies.get('chats');\r\n    if (storedChats) {\r\n      setChats(JSON.parse(storedChats));\r\n    }\r\n  }, []); // Empty dependency array ensures this effect runs only once on mount\r\n\r\n  return (\r\n    <MessageContext.Provider value={{ selectedUser, setSelectedUser, chats, addChat }}>\r\n      {children}\r\n    </MessageContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,OAAO,MAAMC,cAAc,gBAAGN,aAAa,CAAC,CAAC;AAE7C,OAAO,MAAMO,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAMa,OAAO,GAAIC,IAAI,IAAK;IACxB,MAAMC,YAAY,GAAG,CAAC,GAAGJ,KAAK,EAAEG,IAAI,CAAC;IACrCF,QAAQ,CAACG,YAAY,CAAC;IACtBb,OAAO,CAACc,GAAG,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACH,YAAY,CAAC,EAAE;MAAEI,OAAO,EAAE;IAAE,CAAC,CAAC,CAAC,CAAC;EACtE,CAAC;EAEDlB,SAAS,CAAC,MAAM;IACd;IACA,MAAMmB,WAAW,GAAGlB,OAAO,CAACmB,GAAG,CAAC,OAAO,CAAC;IACxC,IAAID,WAAW,EAAE;MACfR,QAAQ,CAACK,IAAI,CAACK,KAAK,CAACF,WAAW,CAAC,CAAC;IACnC;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEhB,OAAA,CAACC,cAAc,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAEf,YAAY;MAAEC,eAAe;MAAEC,KAAK;MAAEE;IAAQ,CAAE;IAAAN,QAAA,EAC/EA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAACpB,EAAA,CAxBWF,eAAe;AAAAuB,EAAA,GAAfvB,eAAe;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
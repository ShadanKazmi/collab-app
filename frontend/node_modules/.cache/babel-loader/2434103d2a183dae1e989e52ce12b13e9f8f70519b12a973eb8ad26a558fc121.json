{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shadan Syed Kazmi\\\\Projects\\\\msteams-clone\\\\frontend\\\\src\\\\Components\\\\TeamFeed.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import {\n//     CommentText,\n//     CommentMetadata,\n//     CommentGroup,\n//     CommentContent,\n//     CommentAvatar,\n//     CommentActions,\n//     CommentAuthor,\n//     Comment,\n//     Form,\n//     FormTextArea,\n//     Button,\n//     Icon,\n// } from 'semantic-ui-react';\n// import axios from 'axios';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import Cookies from 'js-cookie';\n\n// const TeamFeed = () => {\n//     const { teamId } = useParams();\n//     const navigate = useNavigate();\n//     const [comments, setComments] = useState([]);\n//     const [newComment, setNewComment] = useState('');\n//     const [replyText, setReplyText] = useState('');\n//     const [replyingIndex, setReplyingIndex] = useState(null);\n\n//     useEffect(() => {\n//         const fetchMessages = async () => {\n//             try {\n//                 const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\n//                 setComments(response.data);\n//             } catch (error) {\n//                 console.error('Error fetching messages:', error);\n//             }\n//         };\n\n//         fetchMessages();\n//     }, [teamId]);\n\n//     const getCurrentUser = async () => {\n//         try {\n//             const userId = Cookies.get('userId');\n//             if (!userId) {\n//                 console.error('User ID not found in cookies.');\n//                 return null;\n//             }\n//             const response = await axios.get(`http://localhost:8000/userAuth/${userId}`);\n//             return response.data; // Assuming your user API returns an object with firstName and lastName\n//         } catch (error) {\n//             console.error('Error fetching user:', error);\n//             return null;\n//         }\n//     };\n\n//     const handleAddComment = async () => {\n//         if (newComment.trim() !== '') {\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n//             const userId = Cookies.get('userId');\n\n//             // Fetch current user's details\n//             const currentUser = await getCurrentUser();\n//             if (!currentUser) {\n//                 console.error('User not found.');\n//                 return;\n//             }\n\n//             const commentData = {\n//                 textContent: newComment,\n//                 createdBy: {\n//                     _id: userId,\n//                     firstName: currentUser.firstName,\n//                     lastName: currentUser.lastName,\n//                 },\n//                 createdAt: currentDate,\n//                 replies: [],\n//             };\n\n//             try {\n//                 const response = await axios.post('http://localhost:8000/feed/', {\n//                     textContent: newComment,\n//                     teamId: teamId,\n//                     userId: userId,\n//                 });\n\n//                 const savedMessage = response.data;\n//                 commentData._id = savedMessage._id;\n//                 setComments([...comments, commentData]);\n//                 setNewComment('');\n//             } catch (error) {\n//                 console.error('Error adding message:', error);\n//             }\n//         }\n//     };\n\n//     const handleAddReply = async (commentId) => {\n//         if (replyText.trim() !== '') {\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n//             const userId = Cookies.get('userId');\n//             const currentUser = await getCurrentUser();\n//             const replyData = {\n//                 textContent: replyText,\n//                 createdBy: {\n//                     _id: userId,\n//                     firstName: currentUser.firstName,\n//                     lastName: currentUser.lastName,\n//                 },\n//                 createdAt: currentDate,\n//             };\n\n//             try {\n//                 const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\n//                     textContent: replyText,\n//                     userId: userId,\n//                 });\n\n//                 const updatedComments = comments.map(comment =>\n//                     comment._id === commentId\n//                         ? {\n//                               ...comment,\n//                               replies: [...comment.replies, { ...replyData, _id: response.data._id }],\n//                           }\n//                         : comment\n//                 );\n\n//                 setComments(updatedComments);\n//                 setReplyText('');\n//                 setReplyingIndex(null);\n//             } catch (error) {\n//                 console.error('Error adding reply:', error);\n//             }\n//         }\n//     };\n\n//     const startReply = (index) => {\n//         setReplyingIndex(index);\n//     };\n\n//     const handleUserClick = (user) => {\n//         navigate('/profile', { state: { user } });\n//     };\n\n//     return (\n//         <div style={{ paddingLeft: '100px', marginTop: '7rem', position: 'relative', overflow: 'hidden' }}>\n//             <div style={{ paddingBottom: '4rem', marginBottom: '4rem' }}>\n//                 <CommentGroup threaded size='large'>\n//                     {comments.map((comment, index) => (\n//                         <Comment key={comment._id}>\n//                             <CommentAvatar as='a' src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'} />\n//                             <CommentContent>\n//                                 <CommentAuthor as='a' onClick={() => handleUserClick(comment.createdBy)}>\n//                                     {comment.createdBy.firstName} {comment.createdBy.lastName}\n//                                 </CommentAuthor>\n//                                 <CommentMetadata>\n//                                     <span>{comment.createdAt}</span>\n//                                 </CommentMetadata>\n//                                 <CommentText>{comment.textContent}</CommentText>\n//                                 <CommentActions>\n//                                     <a onClick={() => startReply(index)}>Reply</a>\n//                                 </CommentActions>\n//                                 {comment.replies && comment.replies.length > 0 && (\n//                                     <CommentGroup style={{ marginTop: '0.1px' }}>\n//                                         {comment.replies.map((reply) => (\n//                                             <Comment key={reply._id}>\n//                                                 <CommentAvatar\n//                                                     as='a'\n//                                                     src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'} \n//                                                 />\n//                                                 <CommentContent>\n//                                                     <CommentAuthor as='a' onClick={() => handleUserClick(reply.createdBy)}>\n//                                                         {reply.createdBy.firstName} {reply.createdBy.lastName}\n//                                                     </CommentAuthor>\n//                                                     <CommentMetadata>\n//                                                         <span>{reply.createdAt}</span>\n//                                                     </CommentMetadata>\n//                                                     <CommentText>{reply.textContent}</CommentText>\n//                                                 </CommentContent>\n//                                             </Comment>\n//                                         ))}\n//                                     </CommentGroup>\n//                                 )}\n//                                 {replyingIndex === index && (\n//                                     <Form reply>\n//                                         <FormTextArea\n//                                             value={replyText}\n//                                             onChange={(e) => setReplyText(e.target.value)}\n//                                             placeholder='Write a reply...'\n//                                         />\n//                                         <Button\n//                                             content='Add Reply'\n//                                             labelPosition='left'\n//                                             icon='edit'\n//                                             primary\n//                                             onClick={() => handleAddReply(comment._id)}\n//                                         />\n//                                     </Form>\n//                                 )}\n//                             </CommentContent>\n//                         </Comment>\n//                     ))}\n//                 </CommentGroup>\n//             </div>\n//             <div style={{ position: 'relative', bottom: '0', width: '50%', background: 'white', padding: '1rem' }}>\n//                 <Form reply>\n//                     <FormTextArea\n//                         value={newComment}\n//                         onChange={(e) => setNewComment(e.target.value)}\n//                         placeholder='Send a message'\n//                     />\n//                     <Button content='Send' labelPosition='left' icon='send' onClick={handleAddComment} />\n//                     <Button icon labelPosition='left'>\n//                         <Icon name='upload' />\n//                         Upload File\n//                     </Button>\n//                 </Form>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default TeamFeed;\n\nimport React, { useState, useEffect } from 'react';\nimport { CommentText, CommentMetadata, CommentGroup, CommentContent, CommentAvatar, CommentActions, CommentAuthor, Comment, Form, FormTextArea, Button, Icon } from 'semantic-ui-react';\nimport axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TeamFeed = () => {\n  _s();\n  const {\n    teamId\n  } = useParams();\n  const navigate = useNavigate();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [newFile, setNewFile] = useState(null);\n  const [replyText, setReplyText] = useState('');\n  const [replyingIndex, setReplyingIndex] = useState(null);\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\n        setComments(response.data);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n    fetchMessages();\n  }, [teamId]);\n  const getCurrentUser = async () => {\n    try {\n      const userId = Cookies.get('userId');\n      if (!userId) {\n        console.error('User ID not found in cookies.');\n        return null;\n      }\n      const response = await axios.get(`http://localhost:8000/userAuth/${userId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      return null;\n    }\n  };\n  const handleAddComment = async () => {\n    if (newComment.trim() !== '' || newFile) {\n      const currentDate = new Date().toLocaleString('en-US', {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      });\n      const userId = Cookies.get('userId');\n      const currentUser = await getCurrentUser();\n      if (!currentUser) {\n        console.error('User not found.');\n        return;\n      }\n      const formData = new FormData();\n      formData.append('textContent', newComment);\n      formData.append('teamId', teamId);\n      formData.append('userId', userId);\n      if (newFile) {\n        formData.append('uploadContent', newFile);\n      }\n      try {\n        const response = await axios.post('http://localhost:8000/feed/', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        const savedMessage = response.data;\n        const commentData = {\n          _id: savedMessage._id,\n          textContent: newComment,\n          uploadContent: savedMessage.uploadContent,\n          createdBy: {\n            _id: userId,\n            firstName: currentUser.firstName,\n            lastName: currentUser.lastName\n          },\n          createdAt: currentDate,\n          replies: []\n        };\n        setComments([...comments, commentData]);\n        setNewComment('');\n        setNewFile(null);\n      } catch (error) {\n        console.error('Error adding message:', error);\n      }\n    }\n  };\n  const handleAddReply = async commentId => {\n    if (replyText.trim() !== '') {\n      const currentDate = new Date().toLocaleString('en-US', {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      });\n      const userId = Cookies.get('userId');\n      const currentUser = await getCurrentUser();\n      const replyData = {\n        textContent: replyText,\n        createdBy: {\n          _id: userId,\n          firstName: currentUser.firstName,\n          lastName: currentUser.lastName\n        },\n        createdAt: currentDate\n      };\n      try {\n        const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\n          textContent: replyText,\n          userId: userId\n        });\n        const updatedComments = comments.map(comment => comment._id === commentId ? {\n          ...comment,\n          replies: [...comment.replies, {\n            ...replyData,\n            _id: response.data._id\n          }]\n        } : comment);\n        setComments(updatedComments);\n        setReplyText('');\n        setReplyingIndex(null);\n      } catch (error) {\n        console.error('Error adding reply:', error);\n      }\n    }\n  };\n  const startReply = index => {\n    setReplyingIndex(index);\n  };\n  const handleUserClick = user => {\n    navigate('/profile', {\n      state: {\n        user\n      }\n    });\n  };\n  const handleFileChange = e => {\n    setNewFile(e.target.files[0]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      paddingLeft: '100px',\n      marginTop: '7rem',\n      position: 'relative',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: '4rem',\n        marginBottom: '4rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(CommentGroup, {\n        threaded: true,\n        size: \"large\",\n        children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(Comment, {\n          children: [/*#__PURE__*/_jsxDEV(CommentAvatar, {\n            as: \"a\",\n            src: 'https://react.semantic-ui.com/images/avatar/small/matt.jpg'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(CommentContent, {\n            children: [/*#__PURE__*/_jsxDEV(CommentAuthor, {\n              as: \"a\",\n              onClick: () => handleUserClick(comment.createdBy),\n              children: [comment.createdBy.firstName, \" \", comment.createdBy.lastName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CommentMetadata, {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: comment.createdAt\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CommentText, {\n              children: comment.textContent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 33\n            }, this), comment.uploadContent && /*#__PURE__*/_jsxDEV(CommentText, {\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: `http://localhost:8000${comment.uploadContent}`,\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                children: \"View Uploaded File\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(CommentActions, {\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                onClick: () => startReply(index),\n                children: \"Reply\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 33\n            }, this), comment.replies && comment.replies.length > 0 && /*#__PURE__*/_jsxDEV(CommentGroup, {\n              style: {\n                marginTop: '0.1px'\n              },\n              children: comment.replies.map(reply => /*#__PURE__*/_jsxDEV(Comment, {\n                children: [/*#__PURE__*/_jsxDEV(CommentAvatar, {\n                  as: \"a\",\n                  src: 'https://react.semantic-ui.com/images/avatar/small/matt.jpg'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 407,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(CommentContent, {\n                  children: [/*#__PURE__*/_jsxDEV(CommentAuthor, {\n                    as: \"a\",\n                    onClick: () => handleUserClick(reply.createdBy),\n                    children: [reply.createdBy.firstName, \" \", reply.createdBy.lastName]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 412,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(CommentMetadata, {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: reply.createdAt\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 416,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 415,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(CommentText, {\n                    children: reply.textContent\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 418,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 49\n                }, this)]\n              }, reply._id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 37\n            }, this), replyingIndex === index && /*#__PURE__*/_jsxDEV(Form, {\n              reply: true,\n              children: [/*#__PURE__*/_jsxDEV(FormTextArea, {\n                value: replyText,\n                onChange: e => setReplyText(e.target.value),\n                placeholder: \"Write a reply...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                content: \"Add Reply\",\n                labelPosition: \"left\",\n                icon: \"edit\",\n                primary: true,\n                onClick: () => handleAddReply(comment._id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 29\n          }, this)]\n        }, comment._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        bottom: '0',\n        width: '50%',\n        background: 'white',\n        padding: '1rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        reply: true,\n        children: [/*#__PURE__*/_jsxDEV(FormTextArea, {\n          value: newComment,\n          onChange: e => setNewComment(e.target.value),\n          placeholder: \"Send a message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          content: \"Send\",\n          labelPosition: \"left\",\n          icon: \"send\",\n          onClick: handleAddComment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          as: \"label\",\n          icon: true,\n          labelPosition: \"left\",\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 25\n          }, this), \"Upload File\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            hidden: true,\n            onChange: handleFileChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 379,\n    columnNumber: 9\n  }, this);\n};\n_s(TeamFeed, \"ojqWP4qFnHoMHh+zRoHQsT7PyXc=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = TeamFeed;\nexport default TeamFeed;\nvar _c;\n$RefreshReg$(_c, \"TeamFeed\");","map":{"version":3,"names":["React","useState","useEffect","CommentText","CommentMetadata","CommentGroup","CommentContent","CommentAvatar","CommentActions","CommentAuthor","Comment","Form","FormTextArea","Button","Icon","axios","useParams","useNavigate","Cookies","jsxDEV","_jsxDEV","TeamFeed","_s","teamId","navigate","comments","setComments","newComment","setNewComment","newFile","setNewFile","replyText","setReplyText","replyingIndex","setReplyingIndex","fetchMessages","response","get","data","error","console","getCurrentUser","userId","handleAddComment","trim","currentDate","Date","toLocaleString","hour","minute","hour12","currentUser","formData","FormData","append","post","headers","savedMessage","commentData","_id","textContent","uploadContent","createdBy","firstName","lastName","createdAt","replies","handleAddReply","commentId","replyData","updatedComments","map","comment","startReply","index","handleUserClick","user","state","handleFileChange","e","target","files","style","paddingLeft","marginTop","position","overflow","children","paddingBottom","marginBottom","threaded","size","as","src","fileName","_jsxFileName","lineNumber","columnNumber","onClick","href","rel","length","reply","value","onChange","placeholder","content","labelPosition","icon","primary","bottom","width","background","padding","name","type","hidden","_c","$RefreshReg$"],"sources":["C:/Users/Shadan Syed Kazmi/Projects/msteams-clone/frontend/src/Components/TeamFeed.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import {\r\n//     CommentText,\r\n//     CommentMetadata,\r\n//     CommentGroup,\r\n//     CommentContent,\r\n//     CommentAvatar,\r\n//     CommentActions,\r\n//     CommentAuthor,\r\n//     Comment,\r\n//     Form,\r\n//     FormTextArea,\r\n//     Button,\r\n//     Icon,\r\n// } from 'semantic-ui-react';\r\n// import axios from 'axios';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// import Cookies from 'js-cookie';\r\n\r\n// const TeamFeed = () => {\r\n//     const { teamId } = useParams();\r\n//     const navigate = useNavigate();\r\n//     const [comments, setComments] = useState([]);\r\n//     const [newComment, setNewComment] = useState('');\r\n//     const [replyText, setReplyText] = useState('');\r\n//     const [replyingIndex, setReplyingIndex] = useState(null);\r\n\r\n//     useEffect(() => {\r\n//         const fetchMessages = async () => {\r\n//             try {\r\n//                 const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\r\n//                 setComments(response.data);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching messages:', error);\r\n//             }\r\n//         };\r\n\r\n//         fetchMessages();\r\n//     }, [teamId]);\r\n\r\n//     const getCurrentUser = async () => {\r\n//         try {\r\n//             const userId = Cookies.get('userId');\r\n//             if (!userId) {\r\n//                 console.error('User ID not found in cookies.');\r\n//                 return null;\r\n//             }\r\n//             const response = await axios.get(`http://localhost:8000/userAuth/${userId}`);\r\n//             return response.data; // Assuming your user API returns an object with firstName and lastName\r\n//         } catch (error) {\r\n//             console.error('Error fetching user:', error);\r\n//             return null;\r\n//         }\r\n//     };\r\n\r\n//     const handleAddComment = async () => {\r\n//         if (newComment.trim() !== '') {\r\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n//             const userId = Cookies.get('userId');\r\n\r\n//             // Fetch current user's details\r\n//             const currentUser = await getCurrentUser();\r\n//             if (!currentUser) {\r\n//                 console.error('User not found.');\r\n//                 return;\r\n//             }\r\n\r\n//             const commentData = {\r\n//                 textContent: newComment,\r\n//                 createdBy: {\r\n//                     _id: userId,\r\n//                     firstName: currentUser.firstName,\r\n//                     lastName: currentUser.lastName,\r\n//                 },\r\n//                 createdAt: currentDate,\r\n//                 replies: [],\r\n//             };\r\n\r\n//             try {\r\n//                 const response = await axios.post('http://localhost:8000/feed/', {\r\n//                     textContent: newComment,\r\n//                     teamId: teamId,\r\n//                     userId: userId,\r\n//                 });\r\n\r\n//                 const savedMessage = response.data;\r\n//                 commentData._id = savedMessage._id;\r\n//                 setComments([...comments, commentData]);\r\n//                 setNewComment('');\r\n//             } catch (error) {\r\n//                 console.error('Error adding message:', error);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const handleAddReply = async (commentId) => {\r\n//         if (replyText.trim() !== '') {\r\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n//             const userId = Cookies.get('userId');\r\n//             const currentUser = await getCurrentUser();\r\n//             const replyData = {\r\n//                 textContent: replyText,\r\n//                 createdBy: {\r\n//                     _id: userId,\r\n//                     firstName: currentUser.firstName,\r\n//                     lastName: currentUser.lastName,\r\n//                 },\r\n//                 createdAt: currentDate,\r\n//             };\r\n\r\n//             try {\r\n//                 const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\r\n//                     textContent: replyText,\r\n//                     userId: userId,\r\n//                 });\r\n\r\n//                 const updatedComments = comments.map(comment =>\r\n//                     comment._id === commentId\r\n//                         ? {\r\n//                               ...comment,\r\n//                               replies: [...comment.replies, { ...replyData, _id: response.data._id }],\r\n//                           }\r\n//                         : comment\r\n//                 );\r\n                \r\n//                 setComments(updatedComments);\r\n//                 setReplyText('');\r\n//                 setReplyingIndex(null);\r\n//             } catch (error) {\r\n//                 console.error('Error adding reply:', error);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const startReply = (index) => {\r\n//         setReplyingIndex(index);\r\n//     };\r\n\r\n//     const handleUserClick = (user) => {\r\n//         navigate('/profile', { state: { user } });\r\n//     };\r\n\r\n//     return (\r\n//         <div style={{ paddingLeft: '100px', marginTop: '7rem', position: 'relative', overflow: 'hidden' }}>\r\n//             <div style={{ paddingBottom: '4rem', marginBottom: '4rem' }}>\r\n//                 <CommentGroup threaded size='large'>\r\n//                     {comments.map((comment, index) => (\r\n//                         <Comment key={comment._id}>\r\n//                             <CommentAvatar as='a' src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'} />\r\n//                             <CommentContent>\r\n//                                 <CommentAuthor as='a' onClick={() => handleUserClick(comment.createdBy)}>\r\n//                                     {comment.createdBy.firstName} {comment.createdBy.lastName}\r\n//                                 </CommentAuthor>\r\n//                                 <CommentMetadata>\r\n//                                     <span>{comment.createdAt}</span>\r\n//                                 </CommentMetadata>\r\n//                                 <CommentText>{comment.textContent}</CommentText>\r\n//                                 <CommentActions>\r\n//                                     <a onClick={() => startReply(index)}>Reply</a>\r\n//                                 </CommentActions>\r\n//                                 {comment.replies && comment.replies.length > 0 && (\r\n//                                     <CommentGroup style={{ marginTop: '0.1px' }}>\r\n//                                         {comment.replies.map((reply) => (\r\n//                                             <Comment key={reply._id}>\r\n//                                                 <CommentAvatar\r\n//                                                     as='a'\r\n//                                                     src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'} \r\n//                                                 />\r\n//                                                 <CommentContent>\r\n//                                                     <CommentAuthor as='a' onClick={() => handleUserClick(reply.createdBy)}>\r\n//                                                         {reply.createdBy.firstName} {reply.createdBy.lastName}\r\n//                                                     </CommentAuthor>\r\n//                                                     <CommentMetadata>\r\n//                                                         <span>{reply.createdAt}</span>\r\n//                                                     </CommentMetadata>\r\n//                                                     <CommentText>{reply.textContent}</CommentText>\r\n//                                                 </CommentContent>\r\n//                                             </Comment>\r\n//                                         ))}\r\n//                                     </CommentGroup>\r\n//                                 )}\r\n//                                 {replyingIndex === index && (\r\n//                                     <Form reply>\r\n//                                         <FormTextArea\r\n//                                             value={replyText}\r\n//                                             onChange={(e) => setReplyText(e.target.value)}\r\n//                                             placeholder='Write a reply...'\r\n//                                         />\r\n//                                         <Button\r\n//                                             content='Add Reply'\r\n//                                             labelPosition='left'\r\n//                                             icon='edit'\r\n//                                             primary\r\n//                                             onClick={() => handleAddReply(comment._id)}\r\n//                                         />\r\n//                                     </Form>\r\n//                                 )}\r\n//                             </CommentContent>\r\n//                         </Comment>\r\n//                     ))}\r\n//                 </CommentGroup>\r\n//             </div>\r\n//             <div style={{ position: 'relative', bottom: '0', width: '50%', background: 'white', padding: '1rem' }}>\r\n//                 <Form reply>\r\n//                     <FormTextArea\r\n//                         value={newComment}\r\n//                         onChange={(e) => setNewComment(e.target.value)}\r\n//                         placeholder='Send a message'\r\n//                     />\r\n//                     <Button content='Send' labelPosition='left' icon='send' onClick={handleAddComment} />\r\n//                     <Button icon labelPosition='left'>\r\n//                         <Icon name='upload' />\r\n//                         Upload File\r\n//                     </Button>\r\n//                 </Form>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default TeamFeed;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n    CommentText,\r\n    CommentMetadata,\r\n    CommentGroup,\r\n    CommentContent,\r\n    CommentAvatar,\r\n    CommentActions,\r\n    CommentAuthor,\r\n    Comment,\r\n    Form,\r\n    FormTextArea,\r\n    Button,\r\n    Icon,\r\n} from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst TeamFeed = () => {\r\n    const { teamId } = useParams();\r\n    const navigate = useNavigate();\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [newFile, setNewFile] = useState(null);\r\n    const [replyText, setReplyText] = useState('');\r\n    const [replyingIndex, setReplyingIndex] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\r\n                setComments(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching messages:', error);\r\n            }\r\n        };\r\n\r\n        fetchMessages();\r\n    }, [teamId]);\r\n\r\n    const getCurrentUser = async () => {\r\n        try {\r\n            const userId = Cookies.get('userId');\r\n            if (!userId) {\r\n                console.error('User ID not found in cookies.');\r\n                return null;\r\n            }\r\n            const response = await axios.get(`http://localhost:8000/userAuth/${userId}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching user:', error);\r\n            return null;\r\n        }\r\n    };\r\n\r\n    const handleAddComment = async () => {\r\n        if (newComment.trim() !== '' || newFile) {\r\n            const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n            const userId = Cookies.get('userId');\r\n\r\n            const currentUser = await getCurrentUser();\r\n            if (!currentUser) {\r\n                console.error('User not found.');\r\n                return;\r\n            }\r\n\r\n            const formData = new FormData();\r\n            formData.append('textContent', newComment);\r\n            formData.append('teamId', teamId);\r\n            formData.append('userId', userId);\r\n            if (newFile) {\r\n                formData.append('uploadContent', newFile);\r\n            }\r\n\r\n            try {\r\n                const response = await axios.post('http://localhost:8000/feed/', formData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data',\r\n                    },\r\n                });\r\n\r\n                const savedMessage = response.data;\r\n                const commentData = {\r\n                    _id: savedMessage._id,\r\n                    textContent: newComment,\r\n                    uploadContent: savedMessage.uploadContent,\r\n                    createdBy: {\r\n                        _id: userId,\r\n                        firstName: currentUser.firstName,\r\n                        lastName: currentUser.lastName,\r\n                    },\r\n                    createdAt: currentDate,\r\n                    replies: [],\r\n                };\r\n                setComments([...comments, commentData]);\r\n                setNewComment('');\r\n                setNewFile(null);\r\n            } catch (error) {\r\n                console.error('Error adding message:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleAddReply = async (commentId) => {\r\n        if (replyText.trim() !== '') {\r\n            const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n            const userId = Cookies.get('userId');\r\n            const currentUser = await getCurrentUser();\r\n            const replyData = {\r\n                textContent: replyText,\r\n                createdBy: {\r\n                    _id: userId,\r\n                    firstName: currentUser.firstName,\r\n                    lastName: currentUser.lastName,\r\n                },\r\n                createdAt: currentDate,\r\n            };\r\n\r\n            try {\r\n                const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\r\n                    textContent: replyText,\r\n                    userId: userId,\r\n                });\r\n\r\n                const updatedComments = comments.map(comment =>\r\n                    comment._id === commentId\r\n                        ? {\r\n                              ...comment,\r\n                              replies: [...comment.replies, { ...replyData, _id: response.data._id }],\r\n                          }\r\n                        : comment\r\n                );\r\n\r\n                setComments(updatedComments);\r\n                setReplyText('');\r\n                setReplyingIndex(null);\r\n            } catch (error) {\r\n                console.error('Error adding reply:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const startReply = (index) => {\r\n        setReplyingIndex(index);\r\n    };\r\n\r\n    const handleUserClick = (user) => {\r\n        navigate('/profile', { state: { user } });\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        setNewFile(e.target.files[0]);\r\n    };\r\n\r\n    return (\r\n        <div style={{ paddingLeft: '100px', marginTop: '7rem', position: 'relative', overflow: 'hidden' }}>\r\n            <div style={{ paddingBottom: '4rem', marginBottom: '4rem' }}>\r\n                <CommentGroup threaded size='large'>\r\n                    {comments.map((comment, index) => (\r\n                        <Comment key={comment._id}>\r\n                            <CommentAvatar as='a' src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'} />\r\n                            <CommentContent>\r\n                                <CommentAuthor as='a' onClick={() => handleUserClick(comment.createdBy)}>\r\n                                    {comment.createdBy.firstName} {comment.createdBy.lastName}\r\n                                </CommentAuthor>\r\n                                <CommentMetadata>\r\n                                    <span>{comment.createdAt}</span>\r\n                                </CommentMetadata>\r\n                                <CommentText>{comment.textContent}</CommentText>\r\n                                {comment.uploadContent && (\r\n                                    <CommentText>\r\n                                        <a href={`http://localhost:8000${comment.uploadContent}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                            View Uploaded File\r\n                                        </a>\r\n                                    </CommentText>\r\n                                )}\r\n                                <CommentActions>\r\n                                    <a onClick={() => startReply(index)}>Reply</a>\r\n                                </CommentActions>\r\n                                {comment.replies && comment.replies.length > 0 && (\r\n                                    <CommentGroup style={{ marginTop: '0.1px' }}>\r\n                                        {comment.replies.map((reply) => (\r\n                                            <Comment key={reply._id}>\r\n                                                <CommentAvatar\r\n                                                    as='a'\r\n                                                    src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'}\r\n                                                />\r\n                                                <CommentContent>\r\n                                                    <CommentAuthor as='a' onClick={() => handleUserClick(reply.createdBy)}>\r\n                                                        {reply.createdBy.firstName} {reply.createdBy.lastName}\r\n                                                    </CommentAuthor>\r\n                                                    <CommentMetadata>\r\n                                                        <span>{reply.createdAt}</span>\r\n                                                    </CommentMetadata>\r\n                                                    <CommentText>{reply.textContent}</CommentText>\r\n                                                </CommentContent>\r\n                                            </Comment>\r\n                                        ))}\r\n                                    </CommentGroup>\r\n                                )}\r\n                                {replyingIndex === index && (\r\n                                    <Form reply>\r\n                                        <FormTextArea\r\n                                            value={replyText}\r\n                                            onChange={(e) => setReplyText(e.target.value)}\r\n                                            placeholder='Write a reply...'\r\n                                        />\r\n                                        <Button\r\n                                            content='Add Reply'\r\n                                            labelPosition='left'\r\n                                            icon='edit'\r\n                                            primary\r\n                                            onClick={() => handleAddReply(comment._id)}\r\n                                        />\r\n                                    </Form>\r\n                                )}\r\n                            </CommentContent>\r\n                        </Comment>\r\n                    ))}\r\n                </CommentGroup>\r\n            </div>\r\n            <div style={{ position: 'relative', bottom: '0', width: '50%', background: 'white', padding: '1rem' }}>\r\n                <Form reply>\r\n                    <FormTextArea\r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder='Send a message'\r\n                    />\r\n                    <Button content='Send' labelPosition='left' icon='send' onClick={handleAddComment} />\r\n                    <Button as=\"label\" icon labelPosition='left'>\r\n                        <Icon name='upload' />\r\n                        Upload File\r\n                        <input type=\"file\" hidden onChange={handleFileChange} />\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TeamFeed;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shadan Syed Kazmi\\\\Projects\\\\msteams-clone\\\\frontend\\\\src\\\\Components\\\\TeamFeed.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import {\n//     CommentText,\n//     CommentMetadata,\n//     CommentGroup,\n//     CommentContent,\n//     CommentAvatar,\n//     CommentActions,\n//     CommentAuthor,\n//     Comment,\n//     Form,\n//     FormTextArea,\n//     Button,\n//     Icon,\n//     Divider,\n// } from 'semantic-ui-react';\n// import axios from 'axios';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import Cookies from 'js-cookie';\n// import useDownloader from 'react-use-downloader';\n\n// const TeamFeed = () => {\n//     const { teamId } = useParams();\n//     const navigate = useNavigate();\n//     const [comments, setComments] = useState([]);\n//     const [newComment, setNewComment] = useState('');\n//     const [newFile, setNewFile] = useState(null);\n//     const [filePreview, setFilePreview] = useState(null);\n//     const [replyText, setReplyText] = useState('');\n//     const [replyingIndex, setReplyingIndex] = useState(null);\n//     const { download } = useDownloader();\n\n//     useEffect(() => {\n//         fetchMessages(); // Initial fetch\n\n//         const interval = setInterval(() => {\n//             fetchMessages(); // Fetch messages every 10 seconds (adjust as needed)\n//         }, 10000);\n\n//         return () => {\n//             clearInterval(interval); // Clean up interval on component unmount\n//         };\n//     }, [teamId]);\n\n//     const fetchMessages = async () => {\n//         try {\n//             const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\n//             setComments(response.data);\n//         } catch (error) {\n//             console.error('Error fetching messages:', error);\n//         }\n//     };\n\n//     const getCurrentUser = async () => {\n//         try {\n//             const userId = Cookies.get('userId');\n//             if (!userId) {\n//                 console.error('User ID not found in cookies.');\n//                 return null;\n//             }\n//             const response = await axios.get(`http://localhost:8000/userAuth/${userId}`);\n//             return response.data;\n//         } catch (error) {\n//             console.error('Error fetching user:', error);\n//             return null;\n//         }\n//     };\n\n//     const handleAddComment = async () => {\n//         if (newComment.trim() !== '' || newFile) {\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n//             const userId = Cookies.get('userId');\n\n//             const currentUser = await getCurrentUser();\n//             if (!currentUser) {\n//                 console.error('User not found.');\n//                 return;\n//             }\n\n//             const formData = new FormData();\n//             formData.append('textContent', newComment);\n//             formData.append('teamId', teamId);\n//             formData.append('userId', userId);\n//             if (newFile) {\n//                 formData.append('uploadContent', newFile);\n//             }\n\n//             try {\n//                 const response = await axios.post('http://localhost:8000/feed/', formData, {\n//                     headers: {\n//                         'Content-Type': 'multipart/form-data',\n//                     },\n//                 });\n\n//                 const savedMessage = response.data;\n//                 const commentData = {\n//                     _id: savedMessage._id,\n//                     textContent: newComment,\n//                     uploadContent: savedMessage.uploadContent,\n//                     createdBy: {\n//                         _id: userId,\n//                         firstName: currentUser.firstName,\n//                         lastName: currentUser.lastName,\n//                     },\n//                     createdAt: currentDate,\n//                     replies: [],\n//                 };\n//                 setComments([...comments, commentData]);\n//                 setNewComment('');\n//                 setNewFile(null);\n//                 setFilePreview(null);\n//             } catch (error) {\n//                 console.error('Error adding message:', error);\n//             }\n//         }\n//     };\n\n//     const handleAddReply = async (commentId) => {\n//         if (replyText.trim() !== '') {\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n//             const userId = Cookies.get('userId');\n//             const currentUser = await getCurrentUser();\n//             const replyData = {\n//                 textContent: replyText,\n//                 createdBy: {\n//                     _id: userId,\n//                     firstName: currentUser.firstName,\n//                     lastName: currentUser.lastName,\n//                 },\n//                 createdAt: currentDate,\n//             };\n\n//             try {\n//                 const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\n//                     textContent: replyText,\n//                     userId: userId,\n//                 });\n\n//                 const updatedComments = comments.map(comment =>\n//                     comment._id === commentId\n//                         ? {\n//                             ...comment,\n//                             replies: [...comment.replies, { ...replyData, _id: response.data._id }],\n//                         }\n//                         : comment\n//                 );\n\n//                 setComments(updatedComments);\n//                 setReplyText('');\n//                 setReplyingIndex(null);\n//             } catch (error) {\n//                 console.error('Error adding reply:', error);\n//             }\n//         }\n//     };\n\n//     const startReply = (index) => {\n//         setReplyingIndex(index);\n//     };\n\n//     const handleUserClick = (user) => {\n//         navigate('/profile', { state: { user } });\n//     };\n\n//     const handleFileChange = (e) => {\n//         const file = e.target.files[0];\n//         setNewFile(file);\n//         if (file) {\n//             const reader = new FileReader();\n//             reader.onloadend = () => {\n//                 setFilePreview(reader.result);\n//             };\n//             reader.readAsDataURL(file);\n//         } else {\n//             setFilePreview(null);\n//         }\n//     };\n\n//     const handleFileDownload = (fileUrl) => {\n//         const filename = fileUrl.split('/').pop();\n//         download(fileUrl, filename);\n//     };\n\n//     return (\n//         <div style={{ paddingLeft: '100px', marginTop: '7rem', position: 'relative', overflow: 'hidden' }}>\n//             <Divider horizontal >Feed</Divider>\n//             <div style={{ paddingBottom: '4rem', marginBottom: '4rem' }}>\n//                 <CommentGroup threaded size='large'>\n//                     {comments.map((comment, index) => (\n//                         <Comment key={comment._id}>\n//                             <CommentAvatar as='a' src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'} />\n//                             <CommentContent>\n//                                 <CommentAuthor as='a' onClick={() => handleUserClick(comment.createdBy)}>\n//                                     {comment.createdBy.firstName} {comment.createdBy.lastName}\n//                                 </CommentAuthor>\n//                                 <CommentMetadata>\n//                                     <span>{comment.createdAt}</span>\n//                                 </CommentMetadata>\n//                                 <CommentText>{comment.textContent}</CommentText>\n//                                 {comment.uploadContent && (\n//                                     <CommentText>\n//                                         <Button\n//                                             icon\n//                                             labelPosition='left'\n//                                             onClick={() =>\n//                                                 handleFileDownload(`http://localhost:8000/feed${comment.uploadContent}`)\n//                                             }\n//                                         >\n//                                             <Icon name='file alternate' />\n//                                             {`http://localhost:8000/feed${comment.uploadContent}`.split('/').pop()}\n//                                         </Button>\n//                                     </CommentText>\n//                                 )}\n//                                 <CommentActions>\n//                                     <a onClick={() => startReply(index)}>Reply</a>\n//                                 </CommentActions>\n//                                 {comment.replies && comment.replies.length > 0 && (\n//                                     <CommentGroup style={{ marginTop: '0.1px' }}>\n//                                         {comment.replies.map((reply) => (\n//                                             <Comment key={reply._id}>\n//                                                 <CommentAvatar\n//                                                     as='a'\n//                                                     src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'}\n//                                                 />\n//                                                 <CommentContent>\n//                                                     <CommentAuthor as='a' onClick={() => handleUserClick(reply.createdBy)}>\n//                                                         {reply.createdBy.firstName} {reply.createdBy.lastName}\n//                                                     </CommentAuthor>\n//                                                     <CommentMetadata>\n//                                                         <span>{reply.createdAt}</span>\n//                                                     </CommentMetadata>\n//                                                     <CommentText>{reply.textContent}</CommentText>\n//                                                 </CommentContent>\n//                                             </Comment>\n//                                         ))}\n//                                     </CommentGroup>\n//                                 )}\n//                                 {replyingIndex === index && (\n//                                     <Form reply>\n//                                         <FormTextArea\n//                                             value={replyText}\n//                                             onChange={(e) => setReplyText(e.target.value)}\n//                                             placeholder='Write a reply...'\n//                                         />\n//                                         <Button\n//                                             content='Add Reply'\n//                                             labelPosition='left'\n//                                             icon='edit'\n//                                             primary\n//                                             onClick={() => handleAddReply(comment._id)}\n//                                         />\n//                                     </Form>\n//                                 )}\n//                             </CommentContent>\n//                         </Comment>\n//                     ))}\n//                 </CommentGroup>\n//             </div>\n//             <div style={{ position: 'relative', bottom: '0', width: '50%', background: 'white', padding: '1rem' }}>\n//                 <Form reply>\n//                     <FormTextArea\n//                         value={newComment}\n//                         onChange={(e) => setNewComment(e.target.value)}\n//                         placeholder='Send a message'\n//                     />\n//                     {filePreview && (\n//                         <div>\n//                             <img src={filePreview} alt=\"Preview\" style={{ maxHeight: '200px', marginBottom: '10px' }} />\n//                         </div>\n//                     )}\n//                     <Button content='Send' labelPosition='left' icon='send' onClick={handleAddComment} />\n//                     <Button as=\"label\" icon labelPosition='left'>\n//                         <Icon name='upload' />\n//                         Upload File\n//                         <input type=\"file\" hidden onChange={handleFileChange} />\n//                     </Button>\n//                 </Form>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default TeamFeed;\n\nimport React, { useState, useEffect } from 'react';\nimport { CommentText, CommentMetadata, CommentGroup, CommentContent, CommentAvatar, CommentActions, CommentAuthor, Comment, Form, FormTextArea, Button, Icon, Divider } from 'semantic-ui-react';\nimport axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport useDownloader from 'react-use-downloader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TeamFeed = () => {\n  _s();\n  const {\n    teamId\n  } = useParams();\n  const navigate = useNavigate();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [newFile, setNewFile] = useState(null);\n  const [filePreview, setFilePreview] = useState(null);\n  const [replyText, setReplyText] = useState('');\n  const [replyingIndex, setReplyingIndex] = useState(null);\n  const {\n    download\n  } = useDownloader();\n  useEffect(() => {\n    fetchMessages(); // Initial fetch\n\n    const interval = setInterval(() => {\n      fetchMessages(); // Fetch messages every 10 seconds (adjust as needed)\n    }, 10000);\n    return () => {\n      clearInterval(interval); // Clean up interval on component unmount\n    };\n  }, [teamId]);\n  const fetchMessages = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\n      setComments(response.data);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  const getCurrentUser = async () => {\n    try {\n      const userId = Cookies.get('userId');\n      if (!userId) {\n        console.error('User ID not found in cookies.');\n        return null;\n      }\n      const response = await axios.get(`http://localhost:8000/userAuth/${userId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      return null;\n    }\n  };\n  const handleAddComment = async () => {\n    if (newComment.trim() !== '' || newFile) {\n      const userId = Cookies.get('userId');\n      const currentUser = await getCurrentUser();\n      if (!currentUser) {\n        console.error('User not found.');\n        return;\n      }\n      const formData = new FormData();\n      formData.append('textContent', newComment);\n      formData.append('teamId', teamId);\n      formData.append('userId', userId);\n      if (newFile) {\n        formData.append('uploadContent', newFile);\n      }\n      try {\n        const response = await axios.post('http://localhost:8000/feed/', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        const savedMessage = response.data;\n        const commentData = {\n          _id: savedMessage._id,\n          textContent: newComment,\n          uploadContent: savedMessage.uploadContent,\n          createdBy: {\n            _id: userId,\n            firstName: currentUser.firstName,\n            lastName: currentUser.lastName\n          },\n          createdAt: new Date(savedMessage.createdAt).toLocaleString('en-US', {\n            hour: 'numeric',\n            minute: 'numeric',\n            hour12: true\n          }),\n          replies: []\n        };\n        setComments([...comments, commentData]);\n        setNewComment('');\n        setNewFile(null);\n        setFilePreview(null);\n      } catch (error) {\n        console.error('Error adding message:', error);\n      }\n    }\n  };\n  const handleAddReply = async commentId => {\n    if (replyText.trim() !== '') {\n      const userId = Cookies.get('userId');\n      const currentUser = await getCurrentUser();\n      if (!currentUser) {\n        console.error('User not found.');\n        return;\n      }\n      const replyData = {\n        textContent: replyText,\n        createdBy: {\n          _id: userId,\n          firstName: currentUser.firstName,\n          lastName: currentUser.lastName\n        },\n        createdAt: new Date().toLocaleString('en-US', {\n          hour: 'numeric',\n          minute: 'numeric',\n          hour12: true\n        })\n      };\n      try {\n        const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\n          textContent: replyText,\n          userId: userId\n        });\n        const updatedComments = comments.map(comment => comment._id === commentId ? {\n          ...comment,\n          replies: [...comment.replies, {\n            ...replyData,\n            _id: response.data._id\n          }]\n        } : comment);\n        setComments(updatedComments);\n        setReplyText('');\n        setReplyingIndex(null);\n      } catch (error) {\n        console.error('Error adding reply:', error);\n      }\n    }\n  };\n  const startReplying = index => {\n    setReplyingIndex(index);\n  };\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    setNewFile(file);\n    setFilePreview(URL.createObjectURL(file));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"team-feed\",\n    children: /*#__PURE__*/_jsxDEV(CommentGroup, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Team Feed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 17\n      }, this), comments.map((comment, index) => /*#__PURE__*/_jsxDEV(Comment, {\n        children: [/*#__PURE__*/_jsxDEV(CommentAvatar, {\n          src: comment.createdBy.profileImageURL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CommentContent, {\n          children: [/*#__PURE__*/_jsxDEV(CommentAuthor, {\n            as: \"a\",\n            children: `${comment.createdBy.firstName} ${comment.createdBy.lastName}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(CommentMetadata, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: new Date(comment.createdAt).toLocaleString('en-US', {\n                hour: 'numeric',\n                minute: 'numeric',\n                hour12: true\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(CommentText, {\n            children: comment.textContent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 29\n          }, this), comment.uploadContent && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: `http://localhost:8000${comment.uploadContent}`,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: [/*#__PURE__*/_jsxDEV(Icon, {\n                name: \"file\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 41\n              }, this), \" View Attachment\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(CommentActions, {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              onClick: () => startReplying(index),\n              children: \"Reply\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 29\n          }, this), replyingIndex === index && /*#__PURE__*/_jsxDEV(Form, {\n            reply: true,\n            children: [/*#__PURE__*/_jsxDEV(FormTextArea, {\n              value: replyText,\n              onChange: e => setReplyText(e.target.value),\n              placeholder: \"Type your reply...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              content: \"Add Reply\",\n              labelPosition: \"left\",\n              icon: \"edit\",\n              primary: true,\n              onClick: () => handleAddReply(comment._id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 33\n          }, this), comment.replies.length > 0 && /*#__PURE__*/_jsxDEV(CommentGroup, {\n            children: comment.replies.map(reply => /*#__PURE__*/_jsxDEV(Comment, {\n              children: [/*#__PURE__*/_jsxDEV(CommentAvatar, {\n                src: reply.createdBy.profileImageURL\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 498,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(CommentContent, {\n                children: [/*#__PURE__*/_jsxDEV(CommentAuthor, {\n                  as: \"a\",\n                  children: `${reply.createdBy.firstName} ${reply.createdBy.lastName}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 500,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(CommentMetadata, {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: new Date(reply.createdAt).toLocaleString('en-US', {\n                      hour: 'numeric',\n                      minute: 'numeric',\n                      hour12: true\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 502,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 501,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(CommentText, {\n                  children: reply.textContent\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 504,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 499,\n                columnNumber: 45\n              }, this)]\n            }, reply._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 25\n        }, this)]\n      }, comment._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(Form, {\n        reply: true,\n        children: [/*#__PURE__*/_jsxDEV(FormTextArea, {\n          value: newComment,\n          onChange: e => setNewComment(e.target.value),\n          placeholder: \"Type a new comment...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 21\n        }, this), filePreview && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: filePreview,\n            alt: \"Preview\",\n            style: {\n              maxWidth: '200px',\n              maxHeight: '200px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          content: \"Add Comment\",\n          labelPosition: \"left\",\n          icon: \"edit\",\n          primary: true,\n          onClick: handleAddComment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 455,\n    columnNumber: 9\n  }, this);\n};\n_s(TeamFeed, \"bxM0FnDfn2OKb0TVpEC1V1PxcMI=\", false, function () {\n  return [useParams, useNavigate, useDownloader];\n});\n_c = TeamFeed;\nexport default TeamFeed;\nvar _c;\n$RefreshReg$(_c, \"TeamFeed\");","map":{"version":3,"names":["React","useState","useEffect","CommentText","CommentMetadata","CommentGroup","CommentContent","CommentAvatar","CommentActions","CommentAuthor","Comment","Form","FormTextArea","Button","Icon","Divider","axios","useParams","useNavigate","Cookies","useDownloader","jsxDEV","_jsxDEV","TeamFeed","_s","teamId","navigate","comments","setComments","newComment","setNewComment","newFile","setNewFile","filePreview","setFilePreview","replyText","setReplyText","replyingIndex","setReplyingIndex","download","fetchMessages","interval","setInterval","clearInterval","response","get","data","error","console","getCurrentUser","userId","handleAddComment","trim","currentUser","formData","FormData","append","post","headers","savedMessage","commentData","_id","textContent","uploadContent","createdBy","firstName","lastName","createdAt","Date","toLocaleString","hour","minute","hour12","replies","handleAddReply","commentId","replyData","updatedComments","map","comment","startReplying","index","handleFileChange","e","file","target","files","URL","createObjectURL","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","profileImageURL","as","href","rel","name","onClick","reply","value","onChange","placeholder","content","labelPosition","icon","primary","length","type","alt","style","maxWidth","maxHeight","_c","$RefreshReg$"],"sources":["C:/Users/Shadan Syed Kazmi/Projects/msteams-clone/frontend/src/Components/TeamFeed.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import {\r\n//     CommentText,\r\n//     CommentMetadata,\r\n//     CommentGroup,\r\n//     CommentContent,\r\n//     CommentAvatar,\r\n//     CommentActions,\r\n//     CommentAuthor,\r\n//     Comment,\r\n//     Form,\r\n//     FormTextArea,\r\n//     Button,\r\n//     Icon,\r\n//     Divider,\r\n// } from 'semantic-ui-react';\r\n// import axios from 'axios';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// import Cookies from 'js-cookie';\r\n// import useDownloader from 'react-use-downloader';\r\n\r\n// const TeamFeed = () => {\r\n//     const { teamId } = useParams();\r\n//     const navigate = useNavigate();\r\n//     const [comments, setComments] = useState([]);\r\n//     const [newComment, setNewComment] = useState('');\r\n//     const [newFile, setNewFile] = useState(null);\r\n//     const [filePreview, setFilePreview] = useState(null);\r\n//     const [replyText, setReplyText] = useState('');\r\n//     const [replyingIndex, setReplyingIndex] = useState(null);\r\n//     const { download } = useDownloader();\r\n\r\n//     useEffect(() => {\r\n//         fetchMessages(); // Initial fetch\r\n\r\n//         const interval = setInterval(() => {\r\n//             fetchMessages(); // Fetch messages every 10 seconds (adjust as needed)\r\n//         }, 10000);\r\n\r\n//         return () => {\r\n//             clearInterval(interval); // Clean up interval on component unmount\r\n//         };\r\n//     }, [teamId]);\r\n\r\n//     const fetchMessages = async () => {\r\n//         try {\r\n//             const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\r\n//             setComments(response.data);\r\n//         } catch (error) {\r\n//             console.error('Error fetching messages:', error);\r\n//         }\r\n//     };\r\n\r\n//     const getCurrentUser = async () => {\r\n//         try {\r\n//             const userId = Cookies.get('userId');\r\n//             if (!userId) {\r\n//                 console.error('User ID not found in cookies.');\r\n//                 return null;\r\n//             }\r\n//             const response = await axios.get(`http://localhost:8000/userAuth/${userId}`);\r\n//             return response.data;\r\n//         } catch (error) {\r\n//             console.error('Error fetching user:', error);\r\n//             return null;\r\n//         }\r\n//     };\r\n\r\n//     const handleAddComment = async () => {\r\n//         if (newComment.trim() !== '' || newFile) {\r\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n//             const userId = Cookies.get('userId');\r\n\r\n//             const currentUser = await getCurrentUser();\r\n//             if (!currentUser) {\r\n//                 console.error('User not found.');\r\n//                 return;\r\n//             }\r\n\r\n//             const formData = new FormData();\r\n//             formData.append('textContent', newComment);\r\n//             formData.append('teamId', teamId);\r\n//             formData.append('userId', userId);\r\n//             if (newFile) {\r\n//                 formData.append('uploadContent', newFile);\r\n//             }\r\n\r\n//             try {\r\n//                 const response = await axios.post('http://localhost:8000/feed/', formData, {\r\n//                     headers: {\r\n//                         'Content-Type': 'multipart/form-data',\r\n//                     },\r\n//                 });\r\n\r\n//                 const savedMessage = response.data;\r\n//                 const commentData = {\r\n//                     _id: savedMessage._id,\r\n//                     textContent: newComment,\r\n//                     uploadContent: savedMessage.uploadContent,\r\n//                     createdBy: {\r\n//                         _id: userId,\r\n//                         firstName: currentUser.firstName,\r\n//                         lastName: currentUser.lastName,\r\n//                     },\r\n//                     createdAt: currentDate,\r\n//                     replies: [],\r\n//                 };\r\n//                 setComments([...comments, commentData]);\r\n//                 setNewComment('');\r\n//                 setNewFile(null);\r\n//                 setFilePreview(null);\r\n//             } catch (error) {\r\n//                 console.error('Error adding message:', error);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const handleAddReply = async (commentId) => {\r\n//         if (replyText.trim() !== '') {\r\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n//             const userId = Cookies.get('userId');\r\n//             const currentUser = await getCurrentUser();\r\n//             const replyData = {\r\n//                 textContent: replyText,\r\n//                 createdBy: {\r\n//                     _id: userId,\r\n//                     firstName: currentUser.firstName,\r\n//                     lastName: currentUser.lastName,\r\n//                 },\r\n//                 createdAt: currentDate,\r\n//             };\r\n\r\n//             try {\r\n//                 const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\r\n//                     textContent: replyText,\r\n//                     userId: userId,\r\n//                 });\r\n\r\n//                 const updatedComments = comments.map(comment =>\r\n//                     comment._id === commentId\r\n//                         ? {\r\n//                             ...comment,\r\n//                             replies: [...comment.replies, { ...replyData, _id: response.data._id }],\r\n//                         }\r\n//                         : comment\r\n//                 );\r\n\r\n//                 setComments(updatedComments);\r\n//                 setReplyText('');\r\n//                 setReplyingIndex(null);\r\n//             } catch (error) {\r\n//                 console.error('Error adding reply:', error);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const startReply = (index) => {\r\n//         setReplyingIndex(index);\r\n//     };\r\n\r\n//     const handleUserClick = (user) => {\r\n//         navigate('/profile', { state: { user } });\r\n//     };\r\n\r\n//     const handleFileChange = (e) => {\r\n//         const file = e.target.files[0];\r\n//         setNewFile(file);\r\n//         if (file) {\r\n//             const reader = new FileReader();\r\n//             reader.onloadend = () => {\r\n//                 setFilePreview(reader.result);\r\n//             };\r\n//             reader.readAsDataURL(file);\r\n//         } else {\r\n//             setFilePreview(null);\r\n//         }\r\n//     };\r\n\r\n//     const handleFileDownload = (fileUrl) => {\r\n//         const filename = fileUrl.split('/').pop();\r\n//         download(fileUrl, filename);\r\n//     };\r\n\r\n//     return (\r\n//         <div style={{ paddingLeft: '100px', marginTop: '7rem', position: 'relative', overflow: 'hidden' }}>\r\n//             <Divider horizontal >Feed</Divider>\r\n//             <div style={{ paddingBottom: '4rem', marginBottom: '4rem' }}>\r\n//                 <CommentGroup threaded size='large'>\r\n//                     {comments.map((comment, index) => (\r\n//                         <Comment key={comment._id}>\r\n//                             <CommentAvatar as='a' src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'} />\r\n//                             <CommentContent>\r\n//                                 <CommentAuthor as='a' onClick={() => handleUserClick(comment.createdBy)}>\r\n//                                     {comment.createdBy.firstName} {comment.createdBy.lastName}\r\n//                                 </CommentAuthor>\r\n//                                 <CommentMetadata>\r\n//                                     <span>{comment.createdAt}</span>\r\n//                                 </CommentMetadata>\r\n//                                 <CommentText>{comment.textContent}</CommentText>\r\n//                                 {comment.uploadContent && (\r\n//                                     <CommentText>\r\n//                                         <Button\r\n//                                             icon\r\n//                                             labelPosition='left'\r\n//                                             onClick={() =>\r\n//                                                 handleFileDownload(`http://localhost:8000/feed${comment.uploadContent}`)\r\n//                                             }\r\n//                                         >\r\n//                                             <Icon name='file alternate' />\r\n//                                             {`http://localhost:8000/feed${comment.uploadContent}`.split('/').pop()}\r\n//                                         </Button>\r\n//                                     </CommentText>\r\n//                                 )}\r\n//                                 <CommentActions>\r\n//                                     <a onClick={() => startReply(index)}>Reply</a>\r\n//                                 </CommentActions>\r\n//                                 {comment.replies && comment.replies.length > 0 && (\r\n//                                     <CommentGroup style={{ marginTop: '0.1px' }}>\r\n//                                         {comment.replies.map((reply) => (\r\n//                                             <Comment key={reply._id}>\r\n//                                                 <CommentAvatar\r\n//                                                     as='a'\r\n//                                                     src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'}\r\n//                                                 />\r\n//                                                 <CommentContent>\r\n//                                                     <CommentAuthor as='a' onClick={() => handleUserClick(reply.createdBy)}>\r\n//                                                         {reply.createdBy.firstName} {reply.createdBy.lastName}\r\n//                                                     </CommentAuthor>\r\n//                                                     <CommentMetadata>\r\n//                                                         <span>{reply.createdAt}</span>\r\n//                                                     </CommentMetadata>\r\n//                                                     <CommentText>{reply.textContent}</CommentText>\r\n//                                                 </CommentContent>\r\n//                                             </Comment>\r\n//                                         ))}\r\n//                                     </CommentGroup>\r\n//                                 )}\r\n//                                 {replyingIndex === index && (\r\n//                                     <Form reply>\r\n//                                         <FormTextArea\r\n//                                             value={replyText}\r\n//                                             onChange={(e) => setReplyText(e.target.value)}\r\n//                                             placeholder='Write a reply...'\r\n//                                         />\r\n//                                         <Button\r\n//                                             content='Add Reply'\r\n//                                             labelPosition='left'\r\n//                                             icon='edit'\r\n//                                             primary\r\n//                                             onClick={() => handleAddReply(comment._id)}\r\n//                                         />\r\n//                                     </Form>\r\n//                                 )}\r\n//                             </CommentContent>\r\n//                         </Comment>\r\n//                     ))}\r\n//                 </CommentGroup>\r\n//             </div>\r\n//             <div style={{ position: 'relative', bottom: '0', width: '50%', background: 'white', padding: '1rem' }}>\r\n//                 <Form reply>\r\n//                     <FormTextArea\r\n//                         value={newComment}\r\n//                         onChange={(e) => setNewComment(e.target.value)}\r\n//                         placeholder='Send a message'\r\n//                     />\r\n//                     {filePreview && (\r\n//                         <div>\r\n//                             <img src={filePreview} alt=\"Preview\" style={{ maxHeight: '200px', marginBottom: '10px' }} />\r\n//                         </div>\r\n//                     )}\r\n//                     <Button content='Send' labelPosition='left' icon='send' onClick={handleAddComment} />\r\n//                     <Button as=\"label\" icon labelPosition='left'>\r\n//                         <Icon name='upload' />\r\n//                         Upload File\r\n//                         <input type=\"file\" hidden onChange={handleFileChange} />\r\n//                     </Button>\r\n//                 </Form>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default TeamFeed;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n    CommentText,\r\n    CommentMetadata,\r\n    CommentGroup,\r\n    CommentContent,\r\n    CommentAvatar,\r\n    CommentActions,\r\n    CommentAuthor,\r\n    Comment,\r\n    Form,\r\n    FormTextArea,\r\n    Button,\r\n    Icon,\r\n    Divider,\r\n} from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport Cookies from 'js-cookie';\r\nimport useDownloader from 'react-use-downloader';\r\n\r\nconst TeamFeed = () => {\r\n    const { teamId } = useParams();\r\n    const navigate = useNavigate();\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [newFile, setNewFile] = useState(null);\r\n    const [filePreview, setFilePreview] = useState(null);\r\n    const [replyText, setReplyText] = useState('');\r\n    const [replyingIndex, setReplyingIndex] = useState(null);\r\n    const { download } = useDownloader();\r\n\r\n    useEffect(() => {\r\n        fetchMessages(); // Initial fetch\r\n\r\n        const interval = setInterval(() => {\r\n            fetchMessages(); // Fetch messages every 10 seconds (adjust as needed)\r\n        }, 10000);\r\n\r\n        return () => {\r\n            clearInterval(interval); // Clean up interval on component unmount\r\n        };\r\n    }, [teamId]);\r\n\r\n    const fetchMessages = async () => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\r\n            setComments(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching messages:', error);\r\n        }\r\n    };\r\n\r\n    const getCurrentUser = async () => {\r\n        try {\r\n            const userId = Cookies.get('userId');\r\n            if (!userId) {\r\n                console.error('User ID not found in cookies.');\r\n                return null;\r\n            }\r\n            const response = await axios.get(`http://localhost:8000/userAuth/${userId}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching user:', error);\r\n            return null;\r\n        }\r\n    };\r\n\r\n    const handleAddComment = async () => {\r\n        if (newComment.trim() !== '' || newFile) {\r\n            const userId = Cookies.get('userId');\r\n\r\n            const currentUser = await getCurrentUser();\r\n            if (!currentUser) {\r\n                console.error('User not found.');\r\n                return;\r\n            }\r\n\r\n            const formData = new FormData();\r\n            formData.append('textContent', newComment);\r\n            formData.append('teamId', teamId);\r\n            formData.append('userId', userId);\r\n            if (newFile) {\r\n                formData.append('uploadContent', newFile);\r\n            }\r\n\r\n            try {\r\n                const response = await axios.post('http://localhost:8000/feed/', formData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data',\r\n                    },\r\n                });\r\n\r\n                const savedMessage = response.data;\r\n                const commentData = {\r\n                    _id: savedMessage._id,\r\n                    textContent: newComment,\r\n                    uploadContent: savedMessage.uploadContent,\r\n                    createdBy: {\r\n                        _id: userId,\r\n                        firstName: currentUser.firstName,\r\n                        lastName: currentUser.lastName,\r\n                    },\r\n                    createdAt: new Date(savedMessage.createdAt).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true }),\r\n                    replies: [],\r\n                };\r\n                setComments([...comments, commentData]);\r\n                setNewComment('');\r\n                setNewFile(null);\r\n                setFilePreview(null);\r\n            } catch (error) {\r\n                console.error('Error adding message:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleAddReply = async (commentId) => {\r\n        if (replyText.trim() !== '') {\r\n            const userId = Cookies.get('userId');\r\n            const currentUser = await getCurrentUser();\r\n            if (!currentUser) {\r\n                console.error('User not found.');\r\n                return;\r\n            }\r\n\r\n            const replyData = {\r\n                textContent: replyText,\r\n                createdBy: {\r\n                    _id: userId,\r\n                    firstName: currentUser.firstName,\r\n                    lastName: currentUser.lastName,\r\n                },\r\n                createdAt: new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true }),\r\n            };\r\n\r\n            try {\r\n                const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\r\n                    textContent: replyText,\r\n                    userId: userId,\r\n                });\r\n\r\n                const updatedComments = comments.map(comment =>\r\n                    comment._id === commentId\r\n                        ? {\r\n                            ...comment,\r\n                            replies: [...comment.replies, { ...replyData, _id: response.data._id }],\r\n                        }\r\n                        : comment\r\n                );\r\n\r\n                setComments(updatedComments);\r\n                setReplyText('');\r\n                setReplyingIndex(null);\r\n            } catch (error) {\r\n                console.error('Error adding reply:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const startReplying = (index) => {\r\n        setReplyingIndex(index);\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        const file = e.target.files[0];\r\n        setNewFile(file);\r\n        setFilePreview(URL.createObjectURL(file));\r\n    };\r\n\r\n    return (\r\n        <div className=\"team-feed\">\r\n            <CommentGroup>\r\n                <h3>Team Feed</h3>\r\n                <Divider />\r\n                {comments.map((comment, index) => (\r\n                    <Comment key={comment._id}>\r\n                        <CommentAvatar src={comment.createdBy.profileImageURL} />\r\n                        <CommentContent>\r\n                            <CommentAuthor as=\"a\">{`${comment.createdBy.firstName} ${comment.createdBy.lastName}`}</CommentAuthor>\r\n                            <CommentMetadata>\r\n                                <div>{new Date(comment.createdAt).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })}</div>\r\n                            </CommentMetadata>\r\n                            <CommentText>{comment.textContent}</CommentText>\r\n                            {comment.uploadContent && (\r\n                                <div>\r\n                                    <a href={`http://localhost:8000${comment.uploadContent}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                        <Icon name='file' /> View Attachment\r\n                                    </a>\r\n                                </div>\r\n                            )}\r\n                            <CommentActions>\r\n                                <a onClick={() => startReplying(index)}>Reply</a>\r\n                            </CommentActions>\r\n                            {replyingIndex === index && (\r\n                                <Form reply>\r\n                                    <FormTextArea\r\n                                        value={replyText}\r\n                                        onChange={(e) => setReplyText(e.target.value)}\r\n                                        placeholder=\"Type your reply...\"\r\n                                    />\r\n                                    <Button\r\n                                        content=\"Add Reply\"\r\n                                        labelPosition=\"left\"\r\n                                        icon=\"edit\"\r\n                                        primary\r\n                                        onClick={() => handleAddReply(comment._id)}\r\n                                    />\r\n                                </Form>\r\n                            )}\r\n                            {comment.replies.length > 0 && (\r\n                                <CommentGroup>\r\n                                    {comment.replies.map((reply) => (\r\n                                        <Comment key={reply._id}>\r\n                                            <CommentAvatar src={reply.createdBy.profileImageURL} />\r\n                                            <CommentContent>\r\n                                                <CommentAuthor as=\"a\">{`${reply.createdBy.firstName} ${reply.createdBy.lastName}`}</CommentAuthor>\r\n                                                <CommentMetadata>\r\n                                                    <div>{new Date(reply.createdAt).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })}</div>\r\n                                                </CommentMetadata>\r\n                                                <CommentText>{reply.textContent}</CommentText>\r\n                                            </CommentContent>\r\n                                        </Comment>\r\n                                    ))}\r\n                                </CommentGroup>\r\n                            )}\r\n                        </CommentContent>\r\n                    </Comment>\r\n                ))}\r\n                <Form reply>\r\n                    <FormTextArea\r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder=\"Type a new comment...\"\r\n                    />\r\n                    <input type=\"file\" onChange={handleFileChange} />\r\n                    {filePreview && (\r\n                        <div>\r\n                            <img src={filePreview} alt=\"Preview\" style={{ maxWidth: '200px', maxHeight: '200px' }} />\r\n                        </div>\r\n                    )}\r\n                    <Button content=\"Add Comment\" labelPosition=\"left\" icon=\"edit\" primary onClick={handleAddComment} />\r\n                </Form>\r\n            </CommentGroup>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TeamFeed;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shadan Syed Kazmi\\\\Projects\\\\msteams-clone\\\\frontend\\\\src\\\\Components\\\\TeamFeed.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import {\n//     CommentText,\n//     CommentMetadata,\n//     CommentGroup,\n//     CommentContent,\n//     CommentAvatar,\n//     CommentActions,\n//     CommentAuthor,\n//     Comment,\n//     Form,\n//     FormTextArea,\n//     Button,\n//     Icon,\n// } from 'semantic-ui-react';\n// import axios from 'axios';\n// import { useParams } from 'react-router-dom';\n\n// const TeamFeed = () => {\n//     const { teamId } = useParams();\n//     const [comments, setComments] = useState([]);\n//     const [newComment, setNewComment] = useState('');\n//     const [replyText, setReplyText] = useState('');\n//     const [replyingIndex, setReplyingIndex] = useState(null);\n\n//     useEffect(() => {\n//         const fetchMessages = async () => {\n//             try {\n//                 const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\n//                 setComments(response.data);\n//             } catch (error) {\n//                 console.error('Error fetching messages:', error);\n//             }\n//         };\n\n//         fetchMessages();\n//     }, [teamId]);\n\n//     const handleAddComment = async () => {\n//         if (newComment.trim() !== '') {\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n//             const userId = localStorage.getItem('userId');\n//             const commentData = {\n//                 textContent: newComment,\n//                 createdBy: userId,\n//                 createdAt: currentDate,\n//                 replies: [],\n//             };\n\n//             try {\n//                 const response = await axios.post('http://localhost:8000/feed/', {\n//                     textContent: newComment,\n//                     teamId: teamId,\n//                     userId: userId,\n//                 });\n\n//                 const savedMessage = response.data;\n//                 commentData._id = savedMessage._id; // Assuming saved message returns its ID\n//                 setComments([...comments, commentData]);\n//                 setNewComment('');\n//             } catch (error) {\n//                 console.error('Error adding message:', error);\n//             }\n//         }\n//     };\n\n//     return (\n//         <div style={{ paddingLeft: '100px', marginTop: '7rem', position: 'relative', overflow: \"hidden\" }}>\n//             <div style={{ paddingBottom: '4rem', marginBottom: '4rem' }}>\n//                 <CommentGroup threaded size='large'>\n//                     {comments.map((comment, index) => (\n//                         <Comment key={comment._id}>\n//                             <CommentAvatar as='a' src='https://react.semantic-ui.com/images/avatar/small/matt.jpg' />\n//                             <CommentContent>\n//                                 <CommentAuthor as='a'>{comment.createdBy.firstName} {comment.createdBy.lastName}</CommentAuthor>\n//                                 <CommentMetadata>\n//                                     <span>{comment.createdAt}</span>\n//                                 </CommentMetadata>\n//                                 <CommentText>{comment.textContent}</CommentText>\n//                                 <CommentActions>\n//                                     <a>Reply</a>\n//                                 </CommentActions>\n//                             </CommentContent>\n//                         </Comment>\n//                     ))}\n//                 </CommentGroup>\n\n//             </div>\n//             <div style={{ position: 'fixed', bottom: '0', width: '50%', background: 'white', padding: '1rem' }}>\n//                 <Form reply>\n//                     <FormTextArea\n//                         value={newComment}\n//                         onChange={(e) => setNewComment(e.target.value)}\n//                         placeholder='Send a message'\n//                     />\n//                     <Button\n//                         content='Send'\n//                         labelPosition='left'\n//                         icon='send'\n//                         onClick={handleAddComment}\n//                     />\n//                     <Button icon labelPosition='left' >\n//                         <Icon name='upload' />\n//                         Upload File\n//                     </Button>\n//                 </Form>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default TeamFeed;\n\nimport React, { useState, useEffect } from 'react';\nimport { CommentText, CommentMetadata, CommentGroup, CommentContent, CommentAvatar, CommentActions, CommentAuthor, Comment, Form, FormTextArea, Button, Icon } from 'semantic-ui-react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TeamFeed = () => {\n  _s();\n  const {\n    teamId\n  } = useParams();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [replyText, setReplyText] = useState('');\n  const [replyingIndex, setReplyingIndex] = useState(null);\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\n        setComments(response.data);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n    fetchMessages();\n  }, [teamId]);\n  const handleAddComment = async () => {\n    if (newComment.trim() !== '') {\n      const currentDate = new Date().toLocaleString('en-US', {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      });\n      const userId = localStorage.getItem('userId');\n      const commentData = {\n        textContent: newComment,\n        createdBy: {\n          _id: userId,\n          // Assuming userId is stored as a string\n          firstName: 'YourFirstName',\n          // Replace with actual user data or fetch user info\n          lastName: 'YourLastName' // Replace with actual user data or fetch user info\n        },\n        createdAt: currentDate,\n        replies: []\n      };\n      try {\n        const response = await axios.post('http://localhost:8000/feed/', {\n          textContent: newComment,\n          teamId: teamId,\n          userId: userId\n        });\n        const savedMessage = response.data;\n        commentData._id = savedMessage._id; // Assuming saved message returns its ID\n        setComments([...comments, commentData]);\n        setNewComment('');\n      } catch (error) {\n        console.error('Error adding message:', error);\n      }\n    }\n  };\n  const handleAddReply = async commentId => {\n    if (replyText.trim() !== '') {\n      const currentDate = new Date().toLocaleString('en-US', {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      });\n      const userId = localStorage.getItem('userId'); // Assuming userId is stored in localStorage\n      const replyData = {\n        textContent: replyText,\n        createdBy: {\n          _id: userId,\n          // Assuming userId is stored as a string\n          firstName: firstName,\n          lastName: lastName\n        },\n        createdAt: currentDate\n      };\n      try {\n        const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\n          textContent: replyText,\n          userId: userId\n        });\n        const updatedComments = comments.map(comment => comment._id === commentId ? {\n          ...comment,\n          replies: [...comment.replies, response.data]\n        } : comment);\n        setComments(updatedComments);\n        setReplyText('');\n        setReplyingIndex(null);\n      } catch (error) {\n        console.error('Error adding reply:', error);\n      }\n    }\n  };\n  const startReply = index => {\n    setReplyingIndex(index);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      paddingLeft: '100px',\n      marginTop: '7rem',\n      position: 'relative',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: '4rem',\n        marginBottom: '4rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(CommentGroup, {\n        threaded: true,\n        size: \"large\",\n        children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(Comment, {\n          children: [/*#__PURE__*/_jsxDEV(CommentAvatar, {\n            as: \"a\",\n            src: \"https://react.semantic-ui.com/images/avatar/small/matt.jpg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(CommentContent, {\n            children: [/*#__PURE__*/_jsxDEV(CommentAuthor, {\n              as: \"a\",\n              children: [comment.createdBy.firstName, \" \", comment.createdBy.lastName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CommentMetadata, {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: comment.createdAt\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CommentText, {\n              children: comment.textContent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(CommentActions, {\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                onClick: () => startReply(index),\n                children: \"Reply\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 33\n            }, this), comment.replies && comment.replies.length > 0 && /*#__PURE__*/_jsxDEV(CommentGroup, {\n              style: {\n                marginTop: \"1px\"\n              },\n              children: comment.replies.map(reply => /*#__PURE__*/_jsxDEV(Comment, {\n                children: [/*#__PURE__*/_jsxDEV(CommentAvatar, {\n                  as: \"a\",\n                  src: \"https://react.semantic-ui.com/images/avatar/small/jenny.jpg\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 247,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(CommentContent, {\n                  children: [/*#__PURE__*/_jsxDEV(CommentAuthor, {\n                    as: \"a\",\n                    children: [reply.createdBy.firstName, \" \", reply.createdBy.lastName]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 252,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(CommentMetadata, {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: reply.createdAt\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 256,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 255,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(CommentText, {\n                    children: reply.textContent\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 258,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 251,\n                  columnNumber: 49\n                }, this)]\n              }, reply._id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 37\n            }, this), replyingIndex === index && /*#__PURE__*/_jsxDEV(Form, {\n              reply: true,\n              children: [/*#__PURE__*/_jsxDEV(FormTextArea, {\n                value: replyText,\n                onChange: e => setReplyText(e.target.value),\n                placeholder: \"Write a reply...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                content: \"Add Reply\",\n                labelPosition: \"left\",\n                icon: \"edit\",\n                primary: true,\n                onClick: () => handleAddReply(comment._id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 29\n          }, this)]\n        }, comment._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        bottom: '0',\n        width: '50%',\n        background: 'white',\n        padding: '1rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        reply: true,\n        children: [/*#__PURE__*/_jsxDEV(FormTextArea, {\n          value: newComment,\n          onChange: e => setNewComment(e.target.value),\n          placeholder: \"Send a message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          content: \"Send\",\n          labelPosition: \"left\",\n          icon: \"send\",\n          onClick: handleAddComment\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          icon: true,\n          labelPosition: \"left\",\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 25\n          }, this), \"Upload File\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 9\n  }, this);\n};\n_s(TeamFeed, \"thM26MRwNWiWLKfWKloIqmuJ+Bs=\", false, function () {\n  return [useParams];\n});\n_c = TeamFeed;\nexport default TeamFeed;\nvar _c;\n$RefreshReg$(_c, \"TeamFeed\");","map":{"version":3,"names":["React","useState","useEffect","CommentText","CommentMetadata","CommentGroup","CommentContent","CommentAvatar","CommentActions","CommentAuthor","Comment","Form","FormTextArea","Button","Icon","axios","useParams","jsxDEV","_jsxDEV","TeamFeed","_s","teamId","comments","setComments","newComment","setNewComment","replyText","setReplyText","replyingIndex","setReplyingIndex","fetchMessages","response","get","data","error","console","handleAddComment","trim","currentDate","Date","toLocaleString","hour","minute","hour12","userId","localStorage","getItem","commentData","textContent","createdBy","_id","firstName","lastName","createdAt","replies","post","savedMessage","handleAddReply","commentId","replyData","updatedComments","map","comment","startReply","index","style","paddingLeft","marginTop","position","overflow","children","paddingBottom","marginBottom","threaded","size","as","src","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","reply","value","onChange","e","target","placeholder","content","labelPosition","icon","primary","bottom","width","background","padding","name","_c","$RefreshReg$"],"sources":["C:/Users/Shadan Syed Kazmi/Projects/msteams-clone/frontend/src/Components/TeamFeed.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import {\r\n//     CommentText,\r\n//     CommentMetadata,\r\n//     CommentGroup,\r\n//     CommentContent,\r\n//     CommentAvatar,\r\n//     CommentActions,\r\n//     CommentAuthor,\r\n//     Comment,\r\n//     Form,\r\n//     FormTextArea,\r\n//     Button,\r\n//     Icon,\r\n// } from 'semantic-ui-react';\r\n// import axios from 'axios';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const TeamFeed = () => {\r\n//     const { teamId } = useParams();\r\n//     const [comments, setComments] = useState([]);\r\n//     const [newComment, setNewComment] = useState('');\r\n//     const [replyText, setReplyText] = useState('');\r\n//     const [replyingIndex, setReplyingIndex] = useState(null);\r\n\r\n//     useEffect(() => {\r\n//         const fetchMessages = async () => {\r\n//             try {\r\n//                 const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\r\n//                 setComments(response.data);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching messages:', error);\r\n//             }\r\n//         };\r\n\r\n//         fetchMessages();\r\n//     }, [teamId]);\r\n\r\n//     const handleAddComment = async () => {\r\n//         if (newComment.trim() !== '') {\r\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n//             const userId = localStorage.getItem('userId');\r\n//             const commentData = {\r\n//                 textContent: newComment,\r\n//                 createdBy: userId,\r\n//                 createdAt: currentDate,\r\n//                 replies: [],\r\n//             };\r\n\r\n//             try {\r\n//                 const response = await axios.post('http://localhost:8000/feed/', {\r\n//                     textContent: newComment,\r\n//                     teamId: teamId,\r\n//                     userId: userId,\r\n//                 });\r\n\r\n//                 const savedMessage = response.data;\r\n//                 commentData._id = savedMessage._id; // Assuming saved message returns its ID\r\n//                 setComments([...comments, commentData]);\r\n//                 setNewComment('');\r\n//             } catch (error) {\r\n//                 console.error('Error adding message:', error);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div style={{ paddingLeft: '100px', marginTop: '7rem', position: 'relative', overflow: \"hidden\" }}>\r\n//             <div style={{ paddingBottom: '4rem', marginBottom: '4rem' }}>\r\n//                 <CommentGroup threaded size='large'>\r\n//                     {comments.map((comment, index) => (\r\n//                         <Comment key={comment._id}>\r\n//                             <CommentAvatar as='a' src='https://react.semantic-ui.com/images/avatar/small/matt.jpg' />\r\n//                             <CommentContent>\r\n//                                 <CommentAuthor as='a'>{comment.createdBy.firstName} {comment.createdBy.lastName}</CommentAuthor>\r\n//                                 <CommentMetadata>\r\n//                                     <span>{comment.createdAt}</span>\r\n//                                 </CommentMetadata>\r\n//                                 <CommentText>{comment.textContent}</CommentText>\r\n//                                 <CommentActions>\r\n//                                     <a>Reply</a>\r\n//                                 </CommentActions>\r\n//                             </CommentContent>\r\n//                         </Comment>\r\n//                     ))}\r\n//                 </CommentGroup>\r\n\r\n//             </div>\r\n//             <div style={{ position: 'fixed', bottom: '0', width: '50%', background: 'white', padding: '1rem' }}>\r\n//                 <Form reply>\r\n//                     <FormTextArea\r\n//                         value={newComment}\r\n//                         onChange={(e) => setNewComment(e.target.value)}\r\n//                         placeholder='Send a message'\r\n//                     />\r\n//                     <Button\r\n//                         content='Send'\r\n//                         labelPosition='left'\r\n//                         icon='send'\r\n//                         onClick={handleAddComment}\r\n//                     />\r\n//                     <Button icon labelPosition='left' >\r\n//                         <Icon name='upload' />\r\n//                         Upload File\r\n//                     </Button>\r\n//                 </Form>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default TeamFeed;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n    CommentText,\r\n    CommentMetadata,\r\n    CommentGroup,\r\n    CommentContent,\r\n    CommentAvatar,\r\n    CommentActions,\r\n    CommentAuthor,\r\n    Comment,\r\n    Form,\r\n    FormTextArea,\r\n    Button,\r\n    Icon,\r\n} from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst TeamFeed = () => {\r\n    const { teamId } = useParams();\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [replyText, setReplyText] = useState('');\r\n    const [replyingIndex, setReplyingIndex] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\r\n                setComments(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching messages:', error);\r\n            }\r\n        };\r\n\r\n        fetchMessages();\r\n    }, [teamId]);\r\n\r\n    const handleAddComment = async () => {\r\n        if (newComment.trim() !== '') {\r\n            const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n            const userId = localStorage.getItem('userId');\r\n            const commentData = {\r\n                textContent: newComment,\r\n                createdBy: {\r\n                    _id: userId, // Assuming userId is stored as a string\r\n                    firstName: 'YourFirstName', // Replace with actual user data or fetch user info\r\n                    lastName: 'YourLastName', // Replace with actual user data or fetch user info\r\n                },\r\n                createdAt: currentDate,\r\n                replies: [],\r\n            };\r\n\r\n            try {\r\n                const response = await axios.post('http://localhost:8000/feed/', {\r\n                    textContent: newComment,\r\n                    teamId: teamId,\r\n                    userId: userId,\r\n                });\r\n\r\n                const savedMessage = response.data;\r\n                commentData._id = savedMessage._id; // Assuming saved message returns its ID\r\n                setComments([...comments, commentData]);\r\n                setNewComment('');\r\n            } catch (error) {\r\n                console.error('Error adding message:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleAddReply = async (commentId) => {\r\n        if (replyText.trim() !== '') {\r\n            const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n            const userId = localStorage.getItem('userId'); // Assuming userId is stored in localStorage\r\n            const replyData = {\r\n                textContent: replyText,\r\n                createdBy: {\r\n                    _id: userId, // Assuming userId is stored as a string\r\n                    firstName: firstName, \r\n                    lastName: lastName, \r\n                },\r\n                createdAt: currentDate,\r\n            };\r\n\r\n            try {\r\n                const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\r\n                    textContent: replyText,\r\n                    userId: userId,\r\n                });\r\n\r\n                const updatedComments = comments.map(comment =>\r\n                    comment._id === commentId\r\n                        ? {\r\n                              ...comment,\r\n                              replies: [...comment.replies, response.data],\r\n                          }\r\n                        : comment\r\n                );\r\n                setComments(updatedComments);\r\n                setReplyText('');\r\n                setReplyingIndex(null);\r\n            } catch (error) {\r\n                console.error('Error adding reply:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const startReply = (index) => {\r\n        setReplyingIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div style={{ paddingLeft: '100px', marginTop: '7rem', position: 'relative', overflow: 'hidden' }}>\r\n            <div style={{ paddingBottom: '4rem', marginBottom: '4rem' }}>\r\n                <CommentGroup threaded size='large'>\r\n                    {comments.map((comment, index) => (\r\n                        <Comment key={comment._id}>\r\n                            <CommentAvatar as='a' src='https://react.semantic-ui.com/images/avatar/small/matt.jpg' />\r\n                            <CommentContent>\r\n                                <CommentAuthor as='a'>\r\n                                    {comment.createdBy.firstName} {comment.createdBy.lastName}\r\n                                </CommentAuthor>\r\n                                <CommentMetadata>\r\n                                    <span>{comment.createdAt}</span>\r\n                                </CommentMetadata>\r\n                                <CommentText>{comment.textContent}</CommentText>\r\n                                <CommentActions>\r\n                                    <a onClick={() => startReply(index)}>Reply</a>\r\n                                </CommentActions>\r\n                                {comment.replies && comment.replies.length > 0 && (\r\n                                    <CommentGroup style={{marginTop:\"1px\",}}>\r\n                                        {comment.replies.map((reply) => (\r\n                                            <Comment key={reply._id}>\r\n                                                <CommentAvatar\r\n                                                    as='a'\r\n                                                    src='https://react.semantic-ui.com/images/avatar/small/jenny.jpg'\r\n                                                />\r\n                                                <CommentContent>\r\n                                                    <CommentAuthor as='a'>\r\n                                                        {reply.createdBy.firstName} {reply.createdBy.lastName}\r\n                                                    </CommentAuthor>\r\n                                                    <CommentMetadata>\r\n                                                        <span>{reply.createdAt}</span>\r\n                                                    </CommentMetadata>\r\n                                                    <CommentText>{reply.textContent}</CommentText>\r\n                                                </CommentContent>\r\n                                            </Comment>\r\n                                        ))}\r\n                                    </CommentGroup>\r\n                                )}\r\n                                {replyingIndex === index && (\r\n                                    <Form reply>\r\n                                        <FormTextArea\r\n                                            value={replyText}\r\n                                            onChange={(e) => setReplyText(e.target.value)}\r\n                                            placeholder='Write a reply...'\r\n                                        />\r\n                                        <Button\r\n                                            content='Add Reply'\r\n                                            labelPosition='left'\r\n                                            icon='edit'\r\n                                            primary\r\n                                            onClick={() => handleAddReply(comment._id)}\r\n                                        />\r\n                                    </Form>\r\n                                )}\r\n                            </CommentContent>\r\n                        </Comment>\r\n                    ))}\r\n                </CommentGroup>\r\n            </div>\r\n            <div style={{ position: 'fixed', bottom: '0', width: '50%', background: 'white', padding: '1rem' }}>\r\n                <Form reply>\r\n                    <FormTextArea\r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder='Send a message'\r\n                    />\r\n                    <Button content='Send' labelPosition='left' icon='send' onClick={handleAddComment} />\r\n                    <Button icon labelPosition='left'>\r\n                        <Icon name='upload' />\r\n                        Upload File\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TeamFeed;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
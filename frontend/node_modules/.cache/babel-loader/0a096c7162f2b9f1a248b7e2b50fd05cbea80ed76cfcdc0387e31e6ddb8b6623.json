{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shadan Syed Kazmi\\\\Projects\\\\msteams-clone\\\\frontend\\\\src\\\\Pages\\\\AllTasks.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { List, Icon, Segment } from 'semantic-ui-react';\nimport axios from 'axios';\nimport useDownloader from 'react-use-downloader';\nimport Cookies from 'js-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllTasks = () => {\n  _s();\n  const [teamFiles, setTeamFiles] = useState([]);\n  const {\n    download\n  } = useDownloader();\n  useEffect(() => {\n    const userId = Cookies.get('userId');\n    const fetchFiles = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8000/files/tasks${userId}`);\n        setTeamFiles(response.data.uploadedContents); // Assuming response structure matches provided example\n      } catch (error) {\n        console.error('Error fetching team files:', error);\n      }\n    };\n    fetchFiles();\n  }, [userId]);\n  const handleFileDownload = fileUrl => {\n    const filename = fileUrl.split('/').pop();\n    download(fileUrl, filename);\n  };\n  const formatDateTime = dateTimeString => {\n    const dateTime = new Date(dateTimeString);\n    return `${dateTime.toLocaleDateString()} ${dateTime.toLocaleTimeString()}`;\n  };\n  return /*#__PURE__*/_jsxDEV(Segment, {\n    children: [/*#__PURE__*/_jsxDEV(Icon, {\n      name: \"folder open\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), \"Files\", /*#__PURE__*/_jsxDEV(List, {\n      divided: true,\n      relaxed: true,\n      children: teamFiles.map(file =>\n      // Only render if msgContent exists and taskContent does not exist\n      file.msgContent && !file.taskContent && /*#__PURE__*/_jsxDEV(List.Item, {\n        children: [/*#__PURE__*/_jsxDEV(List.Icon, {\n          name: \"file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(List.Content, {\n          children: /*#__PURE__*/_jsxDEV(List.Header, {\n            as: \"a\",\n            onClick: () => {\n              handleFileDownload(`http://localhost:8000/files${file.msgContent}`);\n            },\n            target: \"_blank\",\n            children: file.msgContent.split('/').pop()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this)]\n      }, file._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(AllTasks, \"aM1A7XdWlnbtXYEmOrIlz58QE/I=\", false, function () {\n  return [useDownloader];\n});\n_c = AllTasks;\nexport default AllTasks;\nvar _c;\n$RefreshReg$(_c, \"AllTasks\");","map":{"version":3,"names":["React","useState","useEffect","List","Icon","Segment","axios","useDownloader","Cookies","jsxDEV","_jsxDEV","AllTasks","_s","teamFiles","setTeamFiles","download","userId","get","fetchFiles","response","data","uploadedContents","error","console","handleFileDownload","fileUrl","filename","split","pop","formatDateTime","dateTimeString","dateTime","Date","toLocaleDateString","toLocaleTimeString","children","name","fileName","_jsxFileName","lineNumber","columnNumber","divided","relaxed","map","file","msgContent","taskContent","Item","Content","Header","as","onClick","target","_id","_c","$RefreshReg$"],"sources":["C:/Users/Shadan Syed Kazmi/Projects/msteams-clone/frontend/src/Pages/AllTasks.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { List, Icon, Segment } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport useDownloader from 'react-use-downloader';\r\nimport Cookies from 'js-cookie';\r\n\r\nconst AllTasks = () => {\r\n  const [teamFiles, setTeamFiles] = useState([]);\r\n  const { download } = useDownloader();\r\n\r\n\r\n  useEffect(() => {\r\n    const userId = Cookies.get('userId')\r\n    const fetchFiles = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:8000/files/tasks${userId}`);\r\n        setTeamFiles(response.data.uploadedContents); // Assuming response structure matches provided example\r\n      } catch (error) {\r\n        console.error('Error fetching team files:', error);\r\n      }\r\n    };\r\n\r\n    fetchFiles();\r\n  }, [userId]);\r\n\r\n  const handleFileDownload = (fileUrl) => {\r\n    const filename = fileUrl.split('/').pop();\r\n    download(fileUrl, filename);\r\n};\r\n\r\n  const formatDateTime = (dateTimeString) => {\r\n    const dateTime = new Date(dateTimeString);\r\n    return `${dateTime.toLocaleDateString()} ${dateTime.toLocaleTimeString()}`;\r\n  };\r\n\r\n  return (\r\n    <Segment>\r\n      <Icon name='folder open' />\r\n      Files\r\n      <List divided relaxed>\r\n        {teamFiles.map(file => (\r\n          // Only render if msgContent exists and taskContent does not exist\r\n          file.msgContent && !file.taskContent && (\r\n            <List.Item key={file._id}>\r\n              <List.Icon name='file' />\r\n              <List.Content>\r\n                <List.Header as='a' onClick = {() => {handleFileDownload(`http://localhost:8000/files${file.msgContent}`)}} target='_blank'>{file.msgContent.split('/').pop()}</List.Header>\r\n                {/* Assuming msgContent contains the file URL */}\r\n              </List.Content>\r\n            </List.Item>\r\n          )\r\n        ))}\r\n      </List>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default AllTasks;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
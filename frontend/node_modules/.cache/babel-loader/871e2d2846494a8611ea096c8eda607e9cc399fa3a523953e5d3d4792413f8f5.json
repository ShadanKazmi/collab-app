{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shadan Syed Kazmi\\\\Projects\\\\msteams-clone\\\\frontend\\\\src\\\\Components\\\\TeamFeed.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import {\n//     CommentText,\n//     CommentMetadata,\n//     CommentGroup,\n//     CommentContent,\n//     CommentAvatar,\n//     CommentActions,\n//     CommentAuthor,\n//     Comment,\n//     Form,\n//     FormTextArea,\n//     Button,\n//     Icon,\n//     Divider,\n// } from 'semantic-ui-react';\n// import axios from 'axios';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import Cookies from 'js-cookie';\n// import useDownloader from 'react-use-downloader';\n\n// const TeamFeed = () => {\n//     const { teamId } = useParams();\n//     const navigate = useNavigate();\n//     const [comments, setComments] = useState([]);\n//     const [newComment, setNewComment] = useState('');\n//     const [newFile, setNewFile] = useState(null);\n//     const [filePreview, setFilePreview] = useState(null);\n//     const [replyText, setReplyText] = useState('');\n//     const [replyingIndex, setReplyingIndex] = useState(null);\n//     const { download } = useDownloader();\n\n//     useEffect(() => {\n//         const fetchMessages = async () => {\n//             try {\n//                 const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\n//                 setComments(response.data);\n//             } catch (error) {\n//                 console.error('Error fetching messages:', error);\n//             }\n//         };\n\n//         fetchMessages();\n//     }, [teamId]);\n\n//     const getCurrentUser = async () => {\n//         try {\n//             const userId = Cookies.get('userId');\n//             if (!userId) {\n//                 console.error('User ID not found in cookies.');\n//                 return null;\n//             }\n//             const response = await axios.get(`http://localhost:8000/userAuth/${userId}`);\n//             return response.data;\n//         } catch (error) {\n//             console.error('Error fetching user:', error);\n//             return null;\n//         }\n//     };\n\n//     const handleAddComment = async () => {\n//         if (newComment.trim() !== '' || newFile) {\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n//             const userId = Cookies.get('userId');\n\n//             const currentUser = await getCurrentUser();\n//             if (!currentUser) {\n//                 console.error('User not found.');\n//                 return;\n//             }\n\n//             const formData = new FormData();\n//             formData.append('textContent', newComment);\n//             formData.append('teamId', teamId);\n//             formData.append('userId', userId);\n//             if (newFile) {\n//                 formData.append('uploadContent', newFile);\n//             }\n\n//             try {\n//                 const response = await axios.post('http://localhost:8000/feed/', formData, {\n//                     headers: {\n//                         'Content-Type': 'multipart/form-data',\n//                     },\n//                 });\n\n//                 const savedMessage = response.data;\n//                 const commentData = {\n//                     _id: savedMessage._id,\n//                     textContent: newComment,\n//                     uploadContent: savedMessage.uploadContent,\n//                     createdBy: {\n//                         _id: userId,\n//                         firstName: currentUser.firstName,\n//                         lastName: currentUser.lastName,\n//                     },\n//                     createdAt: currentDate,\n//                     replies: [],\n//                 };\n//                 setComments([...comments, commentData]);\n//                 setNewComment('');\n//                 setNewFile(null);\n//                 setFilePreview(null);\n//             } catch (error) {\n//                 console.error('Error adding message:', error);\n//             }\n//         }\n//     };\n\n//     const handleAddReply = async (commentId) => {\n//         if (replyText.trim() !== '') {\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\n//             const userId = Cookies.get('userId');\n//             const currentUser = await getCurrentUser();\n//             const replyData = {\n//                 textContent: replyText,\n//                 createdBy: {\n//                     _id: userId,\n//                     firstName: currentUser.firstName,\n//                     lastName: currentUser.lastName,\n//                 },\n//                 createdAt: currentDate,\n//             };\n\n//             try {\n//                 const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\n//                     textContent: replyText,\n//                     userId: userId,\n//                 });\n\n//                 const updatedComments = comments.map(comment =>\n//                     comment._id === commentId\n//                         ? {\n//                             ...comment,\n//                             replies: [...comment.replies, { ...replyData, _id: response.data._id }],\n//                         }\n//                         : comment\n//                 );\n\n//                 setComments(updatedComments);\n//                 setReplyText('');\n//                 setReplyingIndex(null);\n//             } catch (error) {\n//                 console.error('Error adding reply:', error);\n//             }\n//         }\n//     };\n\n//     const startReply = (index) => {\n//         setReplyingIndex(index);\n//     };\n\n//     const handleUserClick = (user) => {\n//         navigate('/profile', { state: { user } });\n//     };\n\n//     const handleFileChange = (e) => {\n//         const file = e.target.files[0];\n//         setNewFile(file);\n//         if (file) {\n//             const reader = new FileReader();\n//             reader.onloadend = () => {\n//                 setFilePreview(reader.result);\n//             };\n//             reader.readAsDataURL(file);\n//         } else {\n//             setFilePreview(null);\n//         }\n//     };\n\n//     const handleFileDownload = (fileUrl) => {\n//         const filename = fileUrl.split('/').pop();\n//         download(fileUrl, filename);\n//     };\n\n//     return (\n//         <div style={{ paddingLeft: '100px', marginTop: '7rem', position: 'relative', overflow: 'hidden' }}>\n//             <Divider horizontal >Feed</Divider>\n//             <div style={{ paddingBottom: '4rem', marginBottom: '4rem' }}>\n//                 <CommentGroup threaded size='large'>\n//                     {comments.map((comment, index) => (\n//                         <Comment key={comment._id}>\n//                             <CommentAvatar as='a' src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'} />\n//                             <CommentContent>\n//                                 <CommentAuthor as='a' onClick={() => handleUserClick(comment.createdBy)}>\n//                                     {comment.createdBy.firstName} {comment.createdBy.lastName}\n//                                 </CommentAuthor>\n//                                 <CommentMetadata>\n//                                     <span>{comment.createdAt}</span>\n//                                 </CommentMetadata>\n//                                 <CommentText>{comment.textContent}</CommentText>\n//                                 {comment.uploadContent && (\n//                                     <CommentText>\n//                                         <Button\n//                                             icon\n//                                             labelPosition='left'\n//                                             onClick={() =>\n//                                                 handleFileDownload(`http://localhost:8000/feed${comment.uploadContent}`)\n//                                             }\n//                                         >\n//                                             <Icon name='file alternate' />\n//                                             {`http://localhost:8000/feed${comment.uploadContent}`.split('/').pop()}\n//                                         </Button>\n//                                     </CommentText>\n//                                 )}\n//                                 <CommentActions>\n//                                     <a onClick={() => startReply(index)}>Reply</a>\n//                                 </CommentActions>\n//                                 {comment.replies && comment.replies.length > 0 && (\n//                                     <CommentGroup style={{ marginTop: '0.1px' }}>\n//                                         {comment.replies.map((reply) => (\n//                                             <Comment key={reply._id}>\n//                                                 <CommentAvatar\n//                                                     as='a'\n//                                                     src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'}\n//                                                 />\n//                                                 <CommentContent>\n//                                                     <CommentAuthor as='a' onClick={() => handleUserClick(reply.createdBy)}>\n//                                                         {reply.createdBy.firstName} {reply.createdBy.lastName}\n//                                                     </CommentAuthor>\n//                                                     <CommentMetadata>\n//                                                         <span>{reply.createdAt}</span>\n//                                                     </CommentMetadata>\n//                                                     <CommentText>{reply.textContent}</CommentText>\n//                                                 </CommentContent>\n//                                             </Comment>\n//                                         ))}\n//                                     </CommentGroup>\n//                                 )}\n//                                 {replyingIndex === index && (\n//                                     <Form reply>\n//                                         <FormTextArea\n//                                             value={replyText}\n//                                             onChange={(e) => setReplyText(e.target.value)}\n//                                             placeholder='Write a reply...'\n//                                         />\n//                                         <Button\n//                                             content='Add Reply'\n//                                             labelPosition='left'\n//                                             icon='edit'\n//                                             primary\n//                                             onClick={() => handleAddReply(comment._id)}\n//                                         />\n//                                     </Form>\n//                                 )}\n//                             </CommentContent>\n//                         </Comment>\n//                     ))}\n//                 </CommentGroup>\n//             </div>\n//             <div style={{ position: 'relative', bottom: '0', width: '50%', background: 'white', padding: '1rem' }}>\n//                 <Form reply>\n//                     <FormTextArea\n//                         value={newComment}\n//                         onChange={(e) => setNewComment(e.target.value)}\n//                         placeholder='Send a message'\n//                     />\n//                     {filePreview && (\n//                         <div>\n//                             <img src={filePreview} alt=\"Preview\" style={{ maxHeight: '200px', marginBottom: '10px' }} />\n//                         </div>\n//                     )}\n//                     <Button content='Send' labelPosition='left' icon='send' onClick={handleAddComment} />\n//                     <Button as=\"label\" icon labelPosition='left'>\n//                         <Icon name='upload' />\n//                         Upload File\n//                         <input type=\"file\" hidden onChange={handleFileChange} />\n//                     </Button>\n//                 </Form>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default TeamFeed;\n\nimport React, { useState, useEffect } from 'react';\nimport { CommentText, CommentMetadata, CommentGroup, CommentContent, CommentAvatar, CommentActions, CommentAuthor, Comment, Form, FormTextArea, Button, Icon, Divider, CommentAction } from 'semantic-ui-react';\nimport axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport useDownloader from 'react-use-downloader';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TeamFeed = () => {\n  _s();\n  const {\n    teamId\n  } = useParams();\n  const navigate = useNavigate();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [newFile, setNewFile] = useState(null);\n  const [filePreview, setFilePreview] = useState(null);\n  const [replyText, setReplyText] = useState('');\n  const [replyingIndex, setReplyingIndex] = useState(null);\n  const {\n    download\n  } = useDownloader();\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\n        setComments(response.data);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n    fetchMessages();\n\n    // Connect to WebSocket server\n    const socket = io('http://localhost:8000');\n\n    // Join team-specific room\n    socket.emit('joinRoom', teamId);\n\n    // Listen for new messages\n    socket.on('newMessage', message => {\n      setComments(prevComments => [...prevComments, message]);\n    });\n\n    // Listen for new replies\n    socket.on('newReply', ({\n      commentId,\n      reply\n    }) => {\n      setComments(prevComments => prevComments.map(comment => comment._id === commentId ? {\n        ...comment,\n        replies: [...comment.replies, reply]\n      } : comment));\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      socket.disconnect();\n    };\n  }, [teamId]);\n  const getCurrentUser = async () => {\n    try {\n      const userId = Cookies.get('userId');\n      if (!userId) {\n        console.error('User ID not found in cookies.');\n        return null;\n      }\n      const response = await axios.get(`http://localhost:8000/userAuth/${userId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      return null;\n    }\n  };\n  const handleAddComment = async () => {\n    if (newComment.trim() !== '' || newFile) {\n      const currentDate = new Date().toLocaleString('en-US', {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      });\n      const userId = Cookies.get('userId');\n      const currentUser = await getCurrentUser();\n      if (!currentUser) {\n        console.error('User not found.');\n        return;\n      }\n      const formData = new FormData();\n      formData.append('textContent', newComment);\n      formData.append('teamId', teamId);\n      formData.append('userId', userId);\n      if (newFile) {\n        formData.append('uploadContent', newFile);\n      }\n      try {\n        const response = await axios.post('http://localhost:8000/feed/', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        const savedMessage = response.data;\n        const commentData = {\n          _id: savedMessage._id,\n          textContent: newComment,\n          uploadContent: savedMessage.uploadContent,\n          createdBy: {\n            _id: userId,\n            firstName: currentUser.firstName,\n            lastName: currentUser.lastName\n          },\n          createdAt: currentDate,\n          replies: []\n        };\n        setComments([...comments, commentData]);\n        setNewComment('');\n        setNewFile(null);\n        setFilePreview(null);\n      } catch (error) {\n        console.error('Error adding message:', error);\n      }\n    }\n  };\n  const handleAddReply = async commentId => {\n    if (replyText.trim() !== '') {\n      const currentDate = new Date().toLocaleString('en-US', {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      });\n      const userId = Cookies.get('userId');\n      const currentUser = await getCurrentUser();\n      const replyData = {\n        textContent: replyText,\n        createdBy: {\n          _id: userId,\n          firstName: currentUser.firstName,\n          lastName: currentUser.lastName\n        },\n        createdAt: currentDate\n      };\n      try {\n        const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\n          textContent: replyText,\n          userId: userId\n        });\n        const savedReply = response.data;\n        setComments(prevComments => prevComments.map(comment => comment._id === commentId ? {\n          ...comment,\n          replies: [...comment.replies, savedReply]\n        } : comment));\n        setReplyText('');\n        setReplyingIndex(null);\n      } catch (error) {\n        console.error('Error adding reply:', error);\n      }\n    }\n  };\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    setNewFile(file);\n    setFilePreview(URL.createObjectURL(file));\n  };\n  const handleDownloadFile = (fileUrl, fileName) => {\n    download(fileUrl, fileName);\n  };\n  const handleCommentClick = userId => {\n    navigate('/userProfile', {\n      state: {\n        userId\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-semibold mb-6\",\n      children: \"Team Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CommentGroup, {\n      children: [comments.map((comment, index) => /*#__PURE__*/_jsxDEV(Comment, {\n        children: [/*#__PURE__*/_jsxDEV(CommentAvatar, {\n          src: comment.createdBy.profileImageURL,\n          alt: \"User Avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CommentContent, {\n          children: [/*#__PURE__*/_jsxDEV(CommentAuthor, {\n            onClick: () => handleCommentClick(comment.createdBy._id),\n            children: [comment.createdBy.firstName, \" \", comment.createdBy.lastName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(CommentMetadata, {\n            children: comment.createdAt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(CommentText, {\n            children: comment.textContent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 29\n          }, this), comment.uploadContent && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              name: \"file\",\n              style: {\n                marginRight: '5px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                cursor: 'pointer',\n                color: 'blue',\n                textDecoration: 'underline'\n              },\n              onClick: () => handleDownloadFile(`http://localhost:8000${comment.uploadContent}`, comment.uploadContent.split('/').pop()),\n              children: comment.uploadContent.split('/').pop()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(CommentActions, {\n            children: /*#__PURE__*/_jsxDEV(CommentAction, {\n              onClick: () => setReplyingIndex(index),\n              children: \"Reply\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 29\n          }, this), replyingIndex === index && /*#__PURE__*/_jsxDEV(Form, {\n            reply: true,\n            onSubmit: () => handleAddReply(comment._id),\n            children: [/*#__PURE__*/_jsxDEV(FormTextArea, {\n              value: replyText,\n              onChange: e => setReplyText(e.target.value),\n              placeholder: \"Write your reply...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              content: \"Add Reply\",\n              labelPosition: \"left\",\n              icon: \"edit\",\n              primary: true,\n              type: \"submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 33\n          }, this), comment.replies && /*#__PURE__*/_jsxDEV(CommentGroup, {\n            children: comment.replies.map((reply, replyIndex) => /*#__PURE__*/_jsxDEV(Comment, {\n              children: [/*#__PURE__*/_jsxDEV(CommentAvatar, {\n                src: reply.createdBy.profileImageURL,\n                alt: \"User Avatar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 525,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(CommentContent, {\n                children: [/*#__PURE__*/_jsxDEV(CommentAuthor, {\n                  onClick: () => handleCommentClick(reply.createdBy._id),\n                  children: [reply.createdBy.firstName, \" \", reply.createdBy.lastName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 530,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(CommentMetadata, {\n                  children: reply.createdAt\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 533,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(CommentText, {\n                  children: reply.textContent\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 534,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 529,\n                columnNumber: 45\n              }, this)]\n            }, replyIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 25\n        }, this)]\n      }, comment._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        reply: true,\n        onSubmit: handleAddComment,\n        children: [/*#__PURE__*/_jsxDEV(FormTextArea, {\n          value: newComment,\n          onChange: e => setNewComment(e.target.value),\n          placeholder: \"Write your comment...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: handleFileChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 21\n        }, this), filePreview && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: filePreview,\n            alt: \"Preview\",\n            className: \"mb-3\",\n            style: {\n              maxWidth: '100%',\n              height: 'auto'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          content: \"Add Comment\",\n          labelPosition: \"left\",\n          icon: \"edit\",\n          primary: true,\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 464,\n    columnNumber: 9\n  }, this);\n};\n_s(TeamFeed, \"bxM0FnDfn2OKb0TVpEC1V1PxcMI=\", false, function () {\n  return [useParams, useNavigate, useDownloader];\n});\n_c = TeamFeed;\nexport default TeamFeed;\nvar _c;\n$RefreshReg$(_c, \"TeamFeed\");","map":{"version":3,"names":["React","useState","useEffect","CommentText","CommentMetadata","CommentGroup","CommentContent","CommentAvatar","CommentActions","CommentAuthor","Comment","Form","FormTextArea","Button","Icon","Divider","CommentAction","axios","useParams","useNavigate","Cookies","useDownloader","io","jsxDEV","_jsxDEV","TeamFeed","_s","teamId","navigate","comments","setComments","newComment","setNewComment","newFile","setNewFile","filePreview","setFilePreview","replyText","setReplyText","replyingIndex","setReplyingIndex","download","fetchMessages","response","get","data","error","console","socket","emit","on","message","prevComments","commentId","reply","map","comment","_id","replies","disconnect","getCurrentUser","userId","handleAddComment","trim","currentDate","Date","toLocaleString","hour","minute","hour12","currentUser","formData","FormData","append","post","headers","savedMessage","commentData","textContent","uploadContent","createdBy","firstName","lastName","createdAt","handleAddReply","replyData","savedReply","handleFileChange","event","file","target","files","URL","createObjectURL","handleDownloadFile","fileUrl","fileName","handleCommentClick","state","className","children","_jsxFileName","lineNumber","columnNumber","index","src","profileImageURL","alt","onClick","name","style","marginRight","cursor","color","textDecoration","split","pop","onSubmit","value","onChange","e","placeholder","content","labelPosition","icon","primary","type","replyIndex","maxWidth","height","_c","$RefreshReg$"],"sources":["C:/Users/Shadan Syed Kazmi/Projects/msteams-clone/frontend/src/Components/TeamFeed.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import {\r\n//     CommentText,\r\n//     CommentMetadata,\r\n//     CommentGroup,\r\n//     CommentContent,\r\n//     CommentAvatar,\r\n//     CommentActions,\r\n//     CommentAuthor,\r\n//     Comment,\r\n//     Form,\r\n//     FormTextArea,\r\n//     Button,\r\n//     Icon,\r\n//     Divider,\r\n// } from 'semantic-ui-react';\r\n// import axios from 'axios';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// import Cookies from 'js-cookie';\r\n// import useDownloader from 'react-use-downloader';\r\n\r\n// const TeamFeed = () => {\r\n//     const { teamId } = useParams();\r\n//     const navigate = useNavigate();\r\n//     const [comments, setComments] = useState([]);\r\n//     const [newComment, setNewComment] = useState('');\r\n//     const [newFile, setNewFile] = useState(null);\r\n//     const [filePreview, setFilePreview] = useState(null);\r\n//     const [replyText, setReplyText] = useState('');\r\n//     const [replyingIndex, setReplyingIndex] = useState(null);\r\n//     const { download } = useDownloader();\r\n\r\n//     useEffect(() => {\r\n//         const fetchMessages = async () => {\r\n//             try {\r\n//                 const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\r\n//                 setComments(response.data);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching messages:', error);\r\n//             }\r\n//         };\r\n\r\n//         fetchMessages();\r\n//     }, [teamId]);\r\n\r\n//     const getCurrentUser = async () => {\r\n//         try {\r\n//             const userId = Cookies.get('userId');\r\n//             if (!userId) {\r\n//                 console.error('User ID not found in cookies.');\r\n//                 return null;\r\n//             }\r\n//             const response = await axios.get(`http://localhost:8000/userAuth/${userId}`);\r\n//             return response.data;\r\n//         } catch (error) {\r\n//             console.error('Error fetching user:', error);\r\n//             return null;\r\n//         }\r\n//     };\r\n\r\n//     const handleAddComment = async () => {\r\n//         if (newComment.trim() !== '' || newFile) {\r\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n//             const userId = Cookies.get('userId');\r\n\r\n//             const currentUser = await getCurrentUser();\r\n//             if (!currentUser) {\r\n//                 console.error('User not found.');\r\n//                 return;\r\n//             }\r\n\r\n//             const formData = new FormData();\r\n//             formData.append('textContent', newComment);\r\n//             formData.append('teamId', teamId);\r\n//             formData.append('userId', userId);\r\n//             if (newFile) {\r\n//                 formData.append('uploadContent', newFile);\r\n//             }\r\n\r\n//             try {\r\n//                 const response = await axios.post('http://localhost:8000/feed/', formData, {\r\n//                     headers: {\r\n//                         'Content-Type': 'multipart/form-data',\r\n//                     },\r\n//                 });\r\n\r\n//                 const savedMessage = response.data;\r\n//                 const commentData = {\r\n//                     _id: savedMessage._id,\r\n//                     textContent: newComment,\r\n//                     uploadContent: savedMessage.uploadContent,\r\n//                     createdBy: {\r\n//                         _id: userId,\r\n//                         firstName: currentUser.firstName,\r\n//                         lastName: currentUser.lastName,\r\n//                     },\r\n//                     createdAt: currentDate,\r\n//                     replies: [],\r\n//                 };\r\n//                 setComments([...comments, commentData]);\r\n//                 setNewComment('');\r\n//                 setNewFile(null);\r\n//                 setFilePreview(null);\r\n//             } catch (error) {\r\n//                 console.error('Error adding message:', error);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const handleAddReply = async (commentId) => {\r\n//         if (replyText.trim() !== '') {\r\n//             const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n//             const userId = Cookies.get('userId');\r\n//             const currentUser = await getCurrentUser();\r\n//             const replyData = {\r\n//                 textContent: replyText,\r\n//                 createdBy: {\r\n//                     _id: userId,\r\n//                     firstName: currentUser.firstName,\r\n//                     lastName: currentUser.lastName,\r\n//                 },\r\n//                 createdAt: currentDate,\r\n//             };\r\n\r\n//             try {\r\n//                 const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\r\n//                     textContent: replyText,\r\n//                     userId: userId,\r\n//                 });\r\n\r\n//                 const updatedComments = comments.map(comment =>\r\n//                     comment._id === commentId\r\n//                         ? {\r\n//                             ...comment,\r\n//                             replies: [...comment.replies, { ...replyData, _id: response.data._id }],\r\n//                         }\r\n//                         : comment\r\n//                 );\r\n\r\n//                 setComments(updatedComments);\r\n//                 setReplyText('');\r\n//                 setReplyingIndex(null);\r\n//             } catch (error) {\r\n//                 console.error('Error adding reply:', error);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const startReply = (index) => {\r\n//         setReplyingIndex(index);\r\n//     };\r\n\r\n//     const handleUserClick = (user) => {\r\n//         navigate('/profile', { state: { user } });\r\n//     };\r\n\r\n//     const handleFileChange = (e) => {\r\n//         const file = e.target.files[0];\r\n//         setNewFile(file);\r\n//         if (file) {\r\n//             const reader = new FileReader();\r\n//             reader.onloadend = () => {\r\n//                 setFilePreview(reader.result);\r\n//             };\r\n//             reader.readAsDataURL(file);\r\n//         } else {\r\n//             setFilePreview(null);\r\n//         }\r\n//     };\r\n\r\n//     const handleFileDownload = (fileUrl) => {\r\n//         const filename = fileUrl.split('/').pop();\r\n//         download(fileUrl, filename);\r\n//     };\r\n\r\n//     return (\r\n//         <div style={{ paddingLeft: '100px', marginTop: '7rem', position: 'relative', overflow: 'hidden' }}>\r\n//             <Divider horizontal >Feed</Divider>\r\n//             <div style={{ paddingBottom: '4rem', marginBottom: '4rem' }}>\r\n//                 <CommentGroup threaded size='large'>\r\n//                     {comments.map((comment, index) => (\r\n//                         <Comment key={comment._id}>\r\n//                             <CommentAvatar as='a' src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'} />\r\n//                             <CommentContent>\r\n//                                 <CommentAuthor as='a' onClick={() => handleUserClick(comment.createdBy)}>\r\n//                                     {comment.createdBy.firstName} {comment.createdBy.lastName}\r\n//                                 </CommentAuthor>\r\n//                                 <CommentMetadata>\r\n//                                     <span>{comment.createdAt}</span>\r\n//                                 </CommentMetadata>\r\n//                                 <CommentText>{comment.textContent}</CommentText>\r\n//                                 {comment.uploadContent && (\r\n//                                     <CommentText>\r\n//                                         <Button\r\n//                                             icon\r\n//                                             labelPosition='left'\r\n//                                             onClick={() =>\r\n//                                                 handleFileDownload(`http://localhost:8000/feed${comment.uploadContent}`)\r\n//                                             }\r\n//                                         >\r\n//                                             <Icon name='file alternate' />\r\n//                                             {`http://localhost:8000/feed${comment.uploadContent}`.split('/').pop()}\r\n//                                         </Button>\r\n//                                     </CommentText>\r\n//                                 )}\r\n//                                 <CommentActions>\r\n//                                     <a onClick={() => startReply(index)}>Reply</a>\r\n//                                 </CommentActions>\r\n//                                 {comment.replies && comment.replies.length > 0 && (\r\n//                                     <CommentGroup style={{ marginTop: '0.1px' }}>\r\n//                                         {comment.replies.map((reply) => (\r\n//                                             <Comment key={reply._id}>\r\n//                                                 <CommentAvatar\r\n//                                                     as='a'\r\n//                                                     src={'https://react.semantic-ui.com/images/avatar/small/matt.jpg'}\r\n//                                                 />\r\n//                                                 <CommentContent>\r\n//                                                     <CommentAuthor as='a' onClick={() => handleUserClick(reply.createdBy)}>\r\n//                                                         {reply.createdBy.firstName} {reply.createdBy.lastName}\r\n//                                                     </CommentAuthor>\r\n//                                                     <CommentMetadata>\r\n//                                                         <span>{reply.createdAt}</span>\r\n//                                                     </CommentMetadata>\r\n//                                                     <CommentText>{reply.textContent}</CommentText>\r\n//                                                 </CommentContent>\r\n//                                             </Comment>\r\n//                                         ))}\r\n//                                     </CommentGroup>\r\n//                                 )}\r\n//                                 {replyingIndex === index && (\r\n//                                     <Form reply>\r\n//                                         <FormTextArea\r\n//                                             value={replyText}\r\n//                                             onChange={(e) => setReplyText(e.target.value)}\r\n//                                             placeholder='Write a reply...'\r\n//                                         />\r\n//                                         <Button\r\n//                                             content='Add Reply'\r\n//                                             labelPosition='left'\r\n//                                             icon='edit'\r\n//                                             primary\r\n//                                             onClick={() => handleAddReply(comment._id)}\r\n//                                         />\r\n//                                     </Form>\r\n//                                 )}\r\n//                             </CommentContent>\r\n//                         </Comment>\r\n//                     ))}\r\n//                 </CommentGroup>\r\n//             </div>\r\n//             <div style={{ position: 'relative', bottom: '0', width: '50%', background: 'white', padding: '1rem' }}>\r\n//                 <Form reply>\r\n//                     <FormTextArea\r\n//                         value={newComment}\r\n//                         onChange={(e) => setNewComment(e.target.value)}\r\n//                         placeholder='Send a message'\r\n//                     />\r\n//                     {filePreview && (\r\n//                         <div>\r\n//                             <img src={filePreview} alt=\"Preview\" style={{ maxHeight: '200px', marginBottom: '10px' }} />\r\n//                         </div>\r\n//                     )}\r\n//                     <Button content='Send' labelPosition='left' icon='send' onClick={handleAddComment} />\r\n//                     <Button as=\"label\" icon labelPosition='left'>\r\n//                         <Icon name='upload' />\r\n//                         Upload File\r\n//                         <input type=\"file\" hidden onChange={handleFileChange} />\r\n//                     </Button>\r\n//                 </Form>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default TeamFeed;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n    CommentText,\r\n    CommentMetadata,\r\n    CommentGroup,\r\n    CommentContent,\r\n    CommentAvatar,\r\n    CommentActions,\r\n    CommentAuthor,\r\n    Comment,\r\n    Form,\r\n    FormTextArea,\r\n    Button,\r\n    Icon,\r\n    Divider,\r\n    CommentAction,\r\n} from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport Cookies from 'js-cookie';\r\nimport useDownloader from 'react-use-downloader';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst TeamFeed = () => {\r\n    const { teamId } = useParams();\r\n    const navigate = useNavigate();\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const [newFile, setNewFile] = useState(null);\r\n    const [filePreview, setFilePreview] = useState(null);\r\n    const [replyText, setReplyText] = useState('');\r\n    const [replyingIndex, setReplyingIndex] = useState(null);\r\n    const { download } = useDownloader();\r\n\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:8000/feed/${teamId}`);\r\n                setComments(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching messages:', error);\r\n            }\r\n        };\r\n\r\n        fetchMessages();\r\n\r\n        // Connect to WebSocket server\r\n        const socket = io('http://localhost:8000');\r\n\r\n        // Join team-specific room\r\n        socket.emit('joinRoom', teamId);\r\n\r\n        // Listen for new messages\r\n        socket.on('newMessage', (message) => {\r\n            setComments((prevComments) => [...prevComments, message]);\r\n        });\r\n\r\n        // Listen for new replies\r\n        socket.on('newReply', ({ commentId, reply }) => {\r\n            setComments((prevComments) =>\r\n                prevComments.map((comment) =>\r\n                    comment._id === commentId ? { ...comment, replies: [...comment.replies, reply] } : comment\r\n                )\r\n            );\r\n        });\r\n\r\n        // Cleanup on component unmount\r\n        return () => {\r\n            socket.disconnect();\r\n        };\r\n    }, [teamId]);\r\n\r\n    const getCurrentUser = async () => {\r\n        try {\r\n            const userId = Cookies.get('userId');\r\n            if (!userId) {\r\n                console.error('User ID not found in cookies.');\r\n                return null;\r\n            }\r\n            const response = await axios.get(`http://localhost:8000/userAuth/${userId}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching user:', error);\r\n            return null;\r\n        }\r\n    };\r\n\r\n    const handleAddComment = async () => {\r\n        if (newComment.trim() !== '' || newFile) {\r\n            const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n            const userId = Cookies.get('userId');\r\n\r\n            const currentUser = await getCurrentUser();\r\n            if (!currentUser) {\r\n                console.error('User not found.');\r\n                return;\r\n            }\r\n\r\n            const formData = new FormData();\r\n            formData.append('textContent', newComment);\r\n            formData.append('teamId', teamId);\r\n            formData.append('userId', userId);\r\n            if (newFile) {\r\n                formData.append('uploadContent', newFile);\r\n            }\r\n\r\n            try {\r\n                const response = await axios.post('http://localhost:8000/feed/', formData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data',\r\n                    },\r\n                });\r\n\r\n                const savedMessage = response.data;\r\n                const commentData = {\r\n                    _id: savedMessage._id,\r\n                    textContent: newComment,\r\n                    uploadContent: savedMessage.uploadContent,\r\n                    createdBy: {\r\n                        _id: userId,\r\n                        firstName: currentUser.firstName,\r\n                        lastName: currentUser.lastName,\r\n                    },\r\n                    createdAt: currentDate,\r\n                    replies: [],\r\n                };\r\n                setComments([...comments, commentData]);\r\n                setNewComment('');\r\n                setNewFile(null);\r\n                setFilePreview(null);\r\n            } catch (error) {\r\n                console.error('Error adding message:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleAddReply = async (commentId) => {\r\n        if (replyText.trim() !== '') {\r\n            const currentDate = new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });\r\n            const userId = Cookies.get('userId');\r\n            const currentUser = await getCurrentUser();\r\n            const replyData = {\r\n                textContent: replyText,\r\n                createdBy: {\r\n                    _id: userId,\r\n                    firstName: currentUser.firstName,\r\n                    lastName: currentUser.lastName,\r\n                },\r\n                createdAt: currentDate,\r\n            };\r\n\r\n            try {\r\n                const response = await axios.post(`http://localhost:8000/feed/${commentId}/reply`, {\r\n                    textContent: replyText,\r\n                    userId: userId,\r\n                });\r\n\r\n                const savedReply = response.data;\r\n                setComments((prevComments) =>\r\n                    prevComments.map((comment) =>\r\n                        comment._id === commentId ? { ...comment, replies: [...comment.replies, savedReply] } : comment\r\n                    )\r\n                );\r\n                setReplyText('');\r\n                setReplyingIndex(null);\r\n            } catch (error) {\r\n                console.error('Error adding reply:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleFileChange = (event) => {\r\n        const file = event.target.files[0];\r\n        setNewFile(file);\r\n        setFilePreview(URL.createObjectURL(file));\r\n    };\r\n\r\n    const handleDownloadFile = (fileUrl, fileName) => {\r\n        download(fileUrl, fileName);\r\n    };\r\n\r\n    const handleCommentClick = (userId) => {\r\n        navigate('/userProfile', { state: { userId } });\r\n    };\r\n\r\n    return (\r\n        <div className=\"w-full p-6\">\r\n            <h1 className=\"text-2xl font-semibold mb-6\">Team Feed</h1>\r\n            <CommentGroup>\r\n                {comments.map((comment, index) => (\r\n                    <Comment key={comment._id}>\r\n                        <CommentAvatar\r\n                            src={comment.createdBy.profileImageURL}\r\n                            alt=\"User Avatar\"\r\n                        />\r\n                        <CommentContent>\r\n                            <CommentAuthor onClick={() => handleCommentClick(comment.createdBy._id)}>\r\n                                {comment.createdBy.firstName} {comment.createdBy.lastName}\r\n                            </CommentAuthor>\r\n                            <CommentMetadata>{comment.createdAt}</CommentMetadata>\r\n                            <CommentText>{comment.textContent}</CommentText>\r\n                            {comment.uploadContent && (\r\n                                <div>\r\n                                    <Icon\r\n                                        name=\"file\"\r\n                                        style={{ marginRight: '5px' }}\r\n                                    />\r\n                                    <span\r\n                                        style={{ cursor: 'pointer', color: 'blue', textDecoration: 'underline' }}\r\n                                        onClick={() =>\r\n                                            handleDownloadFile(\r\n                                                `http://localhost:8000${comment.uploadContent}`,\r\n                                                comment.uploadContent.split('/').pop()\r\n                                            )\r\n                                        }\r\n                                    >\r\n                                        {comment.uploadContent.split('/').pop()}\r\n                                    </span>\r\n                                </div>\r\n                            )}\r\n                            <CommentActions>\r\n                                <CommentAction\r\n                                    onClick={() => setReplyingIndex(index)}\r\n                                >\r\n                                    Reply\r\n                                </CommentAction>\r\n                            </CommentActions>\r\n                            {replyingIndex === index && (\r\n                                <Form reply onSubmit={() => handleAddReply(comment._id)}>\r\n                                    <FormTextArea\r\n                                        value={replyText}\r\n                                        onChange={(e) => setReplyText(e.target.value)}\r\n                                        placeholder=\"Write your reply...\"\r\n                                    />\r\n                                    <Button\r\n                                        content=\"Add Reply\"\r\n                                        labelPosition=\"left\"\r\n                                        icon=\"edit\"\r\n                                        primary\r\n                                        type=\"submit\"\r\n                                    />\r\n                                </Form>\r\n                            )}\r\n                            {comment.replies && (\r\n                                <CommentGroup>\r\n                                    {comment.replies.map((reply, replyIndex) => (\r\n                                        <Comment key={replyIndex}>\r\n                                            <CommentAvatar\r\n                                                src={reply.createdBy.profileImageURL}\r\n                                                alt=\"User Avatar\"\r\n                                            />\r\n                                            <CommentContent>\r\n                                                <CommentAuthor onClick={() => handleCommentClick(reply.createdBy._id)}>\r\n                                                    {reply.createdBy.firstName} {reply.createdBy.lastName}\r\n                                                </CommentAuthor>\r\n                                                <CommentMetadata>{reply.createdAt}</CommentMetadata>\r\n                                                <CommentText>{reply.textContent}</CommentText>\r\n                                            </CommentContent>\r\n                                        </Comment>\r\n                                    ))}\r\n                                </CommentGroup>\r\n                            )}\r\n                        </CommentContent>\r\n                    </Comment>\r\n                ))}\r\n                <Divider />\r\n                <Form reply onSubmit={handleAddComment}>\r\n                    <FormTextArea\r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder=\"Write your comment...\"\r\n                    />\r\n                    <div className=\"mb-3\">\r\n                        <input type=\"file\" onChange={handleFileChange} />\r\n                    </div>\r\n                    {filePreview && (\r\n                        <div>\r\n                            <img\r\n                                src={filePreview}\r\n                                alt=\"Preview\"\r\n                                className=\"mb-3\"\r\n                                style={{ maxWidth: '100%', height: 'auto' }}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    <Button\r\n                        content=\"Add Comment\"\r\n                        labelPosition=\"left\"\r\n                        icon=\"edit\"\r\n                        primary\r\n                        type=\"submit\"\r\n                    />\r\n                </Form>\r\n            </CommentGroup>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TeamFeed;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}